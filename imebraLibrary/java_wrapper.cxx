/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif



#include <imebra/imebra.h>



#include <typeinfo>
#include <stdexcept>


#include <string>


#include <vector>
#include <stdexcept>


#include <map>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>


#include <utility>


#include <stdint.h>		// Use the C99 official header


/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(jint count,std::string const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::string >(static_cast<std::vector< std::string >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_string_Sg__doSize(std::vector< std::string > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_1(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doRemove(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::string const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__doGet(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doSet(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::string const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doRemoveRange(std::vector< std::string > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::uint16_t > *new_std_vector_Sl_std_uint16_t_Sg___SWIG_2(jint count,std::uint16_t const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::uint16_t >(static_cast<std::vector< std::uint16_t >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_uint16_t_Sg__doSize(std::vector< std::uint16_t > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_uint16_t_Sg__doAdd__SWIG_0(std::vector< std::uint16_t > *self,std::vector< unsigned short >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_uint16_t_Sg__doAdd__SWIG_1(std::vector< std::uint16_t > *self,jint index,std::vector< unsigned short >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned short >::value_type std_vector_Sl_std_uint16_t_Sg__doRemove(std::vector< std::uint16_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::uint16_t const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned short >::value_type const &std_vector_Sl_std_uint16_t_Sg__doGet(std::vector< std::uint16_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< unsigned short >::value_type std_vector_Sl_std_uint16_t_Sg__doSet(std::vector< std::uint16_t > *self,jint index,std::vector< unsigned short >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::uint16_t const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_uint16_t_Sg__doRemoveRange(std::vector< std::uint16_t > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< imebra::TagId > *new_std_vector_Sl_imebra_TagId_Sg___SWIG_2(jint count,imebra::TagId const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< imebra::TagId >(static_cast<std::vector< imebra::TagId >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_imebra_TagId_Sg__doSize(std::vector< imebra::TagId > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_imebra_TagId_Sg__doAdd__SWIG_0(std::vector< imebra::TagId > *self,std::vector< imebra::TagId >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_imebra_TagId_Sg__doAdd__SWIG_1(std::vector< imebra::TagId > *self,jint index,std::vector< imebra::TagId >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< imebra::TagId >::value_type std_vector_Sl_imebra_TagId_Sg__doRemove(std::vector< imebra::TagId > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          imebra::TagId const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< imebra::TagId >::value_type const &std_vector_Sl_imebra_TagId_Sg__doGet(std::vector< imebra::TagId > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< imebra::TagId >::value_type std_vector_Sl_imebra_TagId_Sg__doSet(std::vector< imebra::TagId > *self,jint index,std::vector< imebra::TagId >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          imebra::TagId const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_imebra_TagId_Sg__doRemoveRange(std::vector< imebra::TagId > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< imebra::VOIDescription > *new_std_vector_Sl_imebra_VOIDescription_Sg___SWIG_2(jint count,imebra::VOIDescription const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< imebra::VOIDescription >(static_cast<std::vector< imebra::VOIDescription >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_imebra_VOIDescription_Sg__doSize(std::vector< imebra::VOIDescription > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_imebra_VOIDescription_Sg__doAdd__SWIG_0(std::vector< imebra::VOIDescription > *self,std::vector< imebra::VOIDescription >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_imebra_VOIDescription_Sg__doAdd__SWIG_1(std::vector< imebra::VOIDescription > *self,jint index,std::vector< imebra::VOIDescription >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< imebra::VOIDescription >::value_type std_vector_Sl_imebra_VOIDescription_Sg__doRemove(std::vector< imebra::VOIDescription > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          imebra::VOIDescription const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< imebra::VOIDescription >::value_type const &std_vector_Sl_imebra_VOIDescription_Sg__doGet(std::vector< imebra::VOIDescription > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< imebra::VOIDescription >::value_type std_vector_Sl_imebra_VOIDescription_Sg__doSet(std::vector< imebra::VOIDescription > *self,jint index,std::vector< imebra::VOIDescription >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          imebra::VOIDescription const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_imebra_VOIDescription_Sg__doRemoveRange(std::vector< imebra::VOIDescription > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1StringsList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1StringsList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_StringsList_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_StringsList_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_StringsList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_StringsList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1StringsList_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_StringsList_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  try {
    result = std_vector_Sl_std_string_Sg__doSize((std::vector< std::string > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_StringsList_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  std_vector_Sl_std_string_Sg__doAdd__SWIG_0(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_StringsList_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__doAdd__SWIG_1(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_StringsList_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_StringsList_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_StringsList_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    result = std_vector_Sl_std_string_Sg__doSet(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_StringsList_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_string_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1StringsList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1Groups_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::uint16_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::uint16_t > *)new std::vector< std::uint16_t >();
  *(std::vector< std::uint16_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1Groups_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::uint16_t > *arg1 = 0 ;
  std::vector< std::uint16_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::uint16_t > const & reference is null");
    return 0;
  } 
  result = (std::vector< std::uint16_t > *)new std::vector< std::uint16_t >((std::vector< std::uint16_t > const &)*arg1);
  *(std::vector< std::uint16_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Groups_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  result = ((std::vector< std::uint16_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Groups_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  arg2 = (std::vector< unsigned short >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_Groups_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  result = (bool)((std::vector< std::uint16_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Groups_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1Groups_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::uint16_t *arg2 = 0 ;
  std::uint16_t temp2 ;
  std::vector< std::uint16_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (std::uint16_t)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::vector< std::uint16_t > *)new_std_vector_Sl_std_uint16_t_Sg___SWIG_2(arg1,(unsigned short const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::uint16_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_Groups_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  try {
    result = std_vector_Sl_std_uint16_t_Sg__doSize((std::vector< unsigned short > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Groups_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  std::vector< unsigned short >::value_type *arg2 = 0 ;
  std::vector< unsigned short >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  temp2 = (std::vector< unsigned short >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_std_uint16_t_Sg__doAdd__SWIG_0(arg1,(unsigned short const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Groups_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned short >::value_type *arg3 = 0 ;
  std::vector< unsigned short >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned short >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_std_uint16_t_Sg__doAdd__SWIG_1(arg1,arg2,(unsigned short const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_Groups_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned short >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< unsigned short >::value_type)std_vector_Sl_std_uint16_t_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_Groups_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned short >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< unsigned short >::value_type *) &std_vector_Sl_std_uint16_t_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_Groups_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned short >::value_type *arg3 = 0 ;
  std::vector< unsigned short >::value_type temp3 ;
  std::vector< unsigned short >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned short >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    result = (std::vector< unsigned short >::value_type)std_vector_Sl_std_uint16_t_Sg__doSet(arg1,arg2,(unsigned short const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Groups_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_uint16_t_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1Groups(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::uint16_t > *arg1 = (std::vector< std::uint16_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::uint16_t > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TagsIds_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< imebra::TagId > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< imebra::TagId > *)new std::vector< imebra::TagId >();
  *(std::vector< imebra::TagId > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TagsIds_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< imebra::TagId > *arg1 = 0 ;
  std::vector< imebra::TagId > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< imebra::TagId > const & reference is null");
    return 0;
  } 
  result = (std::vector< imebra::TagId > *)new std::vector< imebra::TagId >((std::vector< imebra::TagId > const &)*arg1);
  *(std::vector< imebra::TagId > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TagsIds_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  result = ((std::vector< imebra::TagId > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_TagsIds_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  arg2 = (std::vector< imebra::TagId >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_TagsIds_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  result = (bool)((std::vector< imebra::TagId > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_TagsIds_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TagsIds_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  imebra::TagId *arg2 = 0 ;
  std::vector< imebra::TagId > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< imebra::TagId > *)new_std_vector_Sl_imebra_TagId_Sg___SWIG_2(arg1,(imebra::TagId const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< imebra::TagId > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_TagsIds_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  try {
    result = std_vector_Sl_imebra_TagId_Sg__doSize((std::vector< imebra::TagId > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_TagsIds_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  std::vector< imebra::TagId >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  arg2 = *(std::vector< imebra::TagId >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< imebra::TagId >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_imebra_TagId_Sg__doAdd__SWIG_0(arg1,(imebra::TagId const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_TagsIds_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  jint arg2 ;
  std::vector< imebra::TagId >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< imebra::TagId >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< imebra::TagId >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_imebra_TagId_Sg__doAdd__SWIG_1(arg1,arg2,(imebra::TagId const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TagsIds_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  jint arg2 ;
  std::vector< imebra::TagId >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_imebra_TagId_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< imebra::TagId >::value_type **)&jresult = new std::vector< imebra::TagId >::value_type((const std::vector< imebra::TagId >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TagsIds_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  jint arg2 ;
  std::vector< imebra::TagId >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< imebra::TagId >::value_type *) &std_vector_Sl_imebra_TagId_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< imebra::TagId >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TagsIds_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  jint arg2 ;
  std::vector< imebra::TagId >::value_type *arg3 = 0 ;
  std::vector< imebra::TagId >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< imebra::TagId >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< imebra::TagId >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_imebra_TagId_Sg__doSet(arg1,arg2,(imebra::TagId const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< imebra::TagId >::value_type **)&jresult = new std::vector< imebra::TagId >::value_type((const std::vector< imebra::TagId >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_TagsIds_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_imebra_TagId_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1TagsIds(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< imebra::TagId > *arg1 = (std::vector< imebra::TagId > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< imebra::TagId > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1VOIs_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< imebra::VOIDescription > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< imebra::VOIDescription > *)new std::vector< imebra::VOIDescription >();
  *(std::vector< imebra::VOIDescription > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1VOIs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< imebra::VOIDescription > *arg1 = 0 ;
  std::vector< imebra::VOIDescription > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< imebra::VOIDescription > const & reference is null");
    return 0;
  } 
  result = (std::vector< imebra::VOIDescription > *)new std::vector< imebra::VOIDescription >((std::vector< imebra::VOIDescription > const &)*arg1);
  *(std::vector< imebra::VOIDescription > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_VOIs_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  result = ((std::vector< imebra::VOIDescription > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_VOIs_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  arg2 = (std::vector< imebra::VOIDescription >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_VOIs_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  result = (bool)((std::vector< imebra::VOIDescription > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_VOIs_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1VOIs_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  imebra::VOIDescription *arg2 = 0 ;
  std::vector< imebra::VOIDescription > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(imebra::VOIDescription **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::VOIDescription const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< imebra::VOIDescription > *)new_std_vector_Sl_imebra_VOIDescription_Sg___SWIG_2(arg1,(imebra::VOIDescription const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< imebra::VOIDescription > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_VOIs_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  try {
    result = std_vector_Sl_imebra_VOIDescription_Sg__doSize((std::vector< imebra::VOIDescription > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_VOIs_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  std::vector< imebra::VOIDescription >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  arg2 = *(std::vector< imebra::VOIDescription >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< imebra::VOIDescription >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_imebra_VOIDescription_Sg__doAdd__SWIG_0(arg1,(imebra::VOIDescription const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_VOIs_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  jint arg2 ;
  std::vector< imebra::VOIDescription >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< imebra::VOIDescription >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< imebra::VOIDescription >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_imebra_VOIDescription_Sg__doAdd__SWIG_1(arg1,arg2,(imebra::VOIDescription const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_VOIs_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  jint arg2 ;
  std::vector< imebra::VOIDescription >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_imebra_VOIDescription_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< imebra::VOIDescription >::value_type **)&jresult = new std::vector< imebra::VOIDescription >::value_type((const std::vector< imebra::VOIDescription >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_VOIs_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  jint arg2 ;
  std::vector< imebra::VOIDescription >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< imebra::VOIDescription >::value_type *) &std_vector_Sl_imebra_VOIDescription_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< imebra::VOIDescription >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_VOIs_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  jint arg2 ;
  std::vector< imebra::VOIDescription >::value_type *arg3 = 0 ;
  std::vector< imebra::VOIDescription >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< imebra::VOIDescription >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< imebra::VOIDescription >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_imebra_VOIDescription_Sg__doSet(arg1,arg2,(imebra::VOIDescription const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< imebra::VOIDescription >::value_type **)&jresult = new std::vector< imebra::VOIDescription >::value_type((const std::vector< imebra::VOIDescription >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_VOIs_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_imebra_VOIDescription_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1VOIs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< imebra::VOIDescription > *arg1 = (std::vector< imebra::VOIDescription > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< imebra::VOIDescription > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidVerificationSOPClass_11_12_1840_110008_11_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidVerificationSOPClass_1_2_840_10008_1_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidImplicitVRLittleEndian_11_12_1840_110008_11_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidImplicitVRLittleEndian_1_2_840_10008_1_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidExplicitVRLittleEndian_11_12_1840_110008_11_12_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidExplicitVRLittleEndian_1_2_840_10008_1_2_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDeflatedExplicitVRLittleEndian_11_12_1840_110008_11_12_11_199_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDeflatedExplicitVRLittleEndian_1_2_840_10008_1_2_1_99;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidExplicitVRBigEndian_11_12_1840_110008_11_12_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidExplicitVRBigEndian_1_2_840_10008_1_2_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEGBaselineProcess1_11_12_1840_110008_11_12_14_150_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEGBaselineProcess1_1_2_840_10008_1_2_4_50;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEGExtendedProcess2_14_11_12_1840_110008_11_12_14_151_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEGExtendedProcess2_4_1_2_840_10008_1_2_4_51;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEGExtendedProcess3_15_11_12_1840_110008_11_12_14_152_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEGExtendedProcess3_5_1_2_840_10008_1_2_4_52;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEGSpectralSelectionNonHierarchicalProcess6_18_11_12_1840_110008_11_12_14_153_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEGSpectralSelectionNonHierarchicalProcess6_8_1_2_840_10008_1_2_4_53;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEGSpectralSelectionNonHierarchicalProcess7_19_11_12_1840_110008_11_12_14_154_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEGSpectralSelectionNonHierarchicalProcess7_9_1_2_840_10008_1_2_4_54;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEGFullProgressionNonHierarchicalProcess10_112_11_12_1840_110008_11_12_14_155_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEGFullProgressionNonHierarchicalProcess10_12_1_2_840_10008_1_2_4_55;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEGFullProgressionNonHierarchicalProcess11_113_11_12_1840_110008_11_12_14_156_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEGFullProgressionNonHierarchicalProcess11_13_1_2_840_10008_1_2_4_56;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEGLosslessNonHierarchicalProcess14_11_12_1840_110008_11_12_14_157_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEGLosslessNonHierarchicalProcess14_1_2_840_10008_1_2_4_57;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEGLosslessNonHierarchicalProcess15_11_12_1840_110008_11_12_14_158_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEGLosslessNonHierarchicalProcess15_1_2_840_10008_1_2_4_58;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEGExtendedHierarchicalProcess16_118_11_12_1840_110008_11_12_14_159_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEGExtendedHierarchicalProcess16_18_1_2_840_10008_1_2_4_59;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEGExtendedHierarchicalProcess17_119_11_12_1840_110008_11_12_14_160_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEGExtendedHierarchicalProcess17_19_1_2_840_10008_1_2_4_60;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEGSpectralSelectionHierarchicalProcess20_122_11_12_1840_110008_11_12_14_161_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEGSpectralSelectionHierarchicalProcess20_22_1_2_840_10008_1_2_4_61;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEGSpectralSelectionHierarchicalProcess21_123_11_12_1840_110008_11_12_14_162_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEGSpectralSelectionHierarchicalProcess21_23_1_2_840_10008_1_2_4_62;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEGFullProgressionHierarchicalProcess24_126_11_12_1840_110008_11_12_14_163_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEGFullProgressionHierarchicalProcess24_26_1_2_840_10008_1_2_4_63;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEGFullProgressionHierarchicalProcess25_127_11_12_1840_110008_11_12_14_164_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEGFullProgressionHierarchicalProcess25_27_1_2_840_10008_1_2_4_64;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEGLosslessHierarchicalProcess28_11_12_1840_110008_11_12_14_165_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEGLosslessHierarchicalProcess28_1_2_840_10008_1_2_4_65;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEGLosslessHierarchicalProcess29_11_12_1840_110008_11_12_14_166_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEGLosslessHierarchicalProcess29_1_2_840_10008_1_2_4_66;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEGLosslessNonHierarchicalFirstOrderPredictionProcess14SelectionValue1_11_12_1840_110008_11_12_14_170_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEGLosslessNonHierarchicalFirstOrderPredictionProcess14SelectionValue1_1_2_840_10008_1_2_4_70;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEGLSLosslessImageCompression_11_12_1840_110008_11_12_14_180_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEGLSLosslessImageCompression_1_2_840_10008_1_2_4_80;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEGLSLossyNearLosslessImageCompression_11_12_1840_110008_11_12_14_181_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEGLSLossyNearLosslessImageCompression_1_2_840_10008_1_2_4_81;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEG2000ImageCompressionLosslessOnly_11_12_1840_110008_11_12_14_190_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEG2000ImageCompressionLosslessOnly_1_2_840_10008_1_2_4_90;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEG2000ImageCompression_11_12_1840_110008_11_12_14_191_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEG2000ImageCompression_1_2_840_10008_1_2_4_91;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEG2000Part2MulticomponentImageCompressionLosslessOnly_11_12_1840_110008_11_12_14_192_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEG2000Part2MulticomponentImageCompressionLosslessOnly_1_2_840_10008_1_2_4_92;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPEG2000Part2MulticomponentImageCompression_11_12_1840_110008_11_12_14_193_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPEG2000Part2MulticomponentImageCompression_1_2_840_10008_1_2_4_93;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPIPReferenced_11_12_1840_110008_11_12_14_194_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPIPReferenced_1_2_840_10008_1_2_4_94;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidJPIPReferencedDeflate_11_12_1840_110008_11_12_14_195_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidJPIPReferencedDeflate_1_2_840_10008_1_2_4_95;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidMPEG2MainProfileMainLevel_11_12_1840_110008_11_12_14_1100_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidMPEG2MainProfileMainLevel_1_2_840_10008_1_2_4_100;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidMPEG2MainProfileHighLevel_11_12_1840_110008_11_12_14_1101_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidMPEG2MainProfileHighLevel_1_2_840_10008_1_2_4_101;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidMPEG4AVCH264HighProfileLevel41_11_12_1840_110008_11_12_14_1102_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidMPEG4AVCH264HighProfileLevel41_1_2_840_10008_1_2_4_102;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidMPEG4AVCH264BDcompatibleHighProfileLevel41_11_12_1840_110008_11_12_14_1103_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidMPEG4AVCH264BDcompatibleHighProfileLevel41_1_2_840_10008_1_2_4_103;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidMPEG4AVCH264HighProfileLevel42For2DVideo_11_12_1840_110008_11_12_14_1104_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidMPEG4AVCH264HighProfileLevel42For2DVideo_1_2_840_10008_1_2_4_104;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidMPEG4AVCH264HighProfileLevel42For3DVideo_11_12_1840_110008_11_12_14_1105_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidMPEG4AVCH264HighProfileLevel42For3DVideo_1_2_840_10008_1_2_4_105;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidMPEG4AVCH264StereoHighProfileLevel42_11_12_1840_110008_11_12_14_1106_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidMPEG4AVCH264StereoHighProfileLevel42_1_2_840_10008_1_2_4_106;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidHEVCH265MainProfileLevel51_11_12_1840_110008_11_12_14_1107_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidHEVCH265MainProfileLevel51_1_2_840_10008_1_2_4_107;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidHEVCH265Main10ProfileLevel51_11_12_1840_110008_11_12_14_1108_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidHEVCH265Main10ProfileLevel51_1_2_840_10008_1_2_4_108;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRLELossless_11_12_1840_110008_11_12_15_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRLELossless_1_2_840_10008_1_2_5;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRFC2557MIMEencapsulation_11_12_1840_110008_11_12_16_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRFC2557MIMEencapsulation_1_2_840_10008_1_2_6_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidXMLEncoding_11_12_1840_110008_11_12_16_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidXMLEncoding_1_2_840_10008_1_2_6_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidMediaStorageDirectoryStorage_11_12_1840_110008_11_13_110_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidMediaStorageDirectoryStorage_1_2_840_10008_1_3_10;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidTalairachBrainAtlasFrameofReference_11_12_1840_110008_11_14_11_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidTalairachBrainAtlasFrameofReference_1_2_840_10008_1_4_1_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSPM2T1FrameofReference_11_12_1840_110008_11_14_11_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSPM2T1FrameofReference_1_2_840_10008_1_4_1_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSPM2T2FrameofReference_11_12_1840_110008_11_14_11_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSPM2T2FrameofReference_1_2_840_10008_1_4_1_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSPM2PDFrameofReference_11_12_1840_110008_11_14_11_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSPM2PDFrameofReference_1_2_840_10008_1_4_1_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSPM2EPIFrameofReference_11_12_1840_110008_11_14_11_15_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSPM2EPIFrameofReference_1_2_840_10008_1_4_1_5;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSPM2FILT1FrameofReference_11_12_1840_110008_11_14_11_16_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSPM2FILT1FrameofReference_1_2_840_10008_1_4_1_6;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSPM2PETFrameofReference_11_12_1840_110008_11_14_11_17_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSPM2PETFrameofReference_1_2_840_10008_1_4_1_7;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSPM2TRANSMFrameofReference_11_12_1840_110008_11_14_11_18_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSPM2TRANSMFrameofReference_1_2_840_10008_1_4_1_8;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSPM2SPECTFrameofReference_11_12_1840_110008_11_14_11_19_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSPM2SPECTFrameofReference_1_2_840_10008_1_4_1_9;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSPM2GRAYFrameofReference_11_12_1840_110008_11_14_11_110_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSPM2GRAYFrameofReference_1_2_840_10008_1_4_1_10;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSPM2WHITEFrameofReference_11_12_1840_110008_11_14_11_111_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSPM2WHITEFrameofReference_1_2_840_10008_1_4_1_11;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSPM2CSFFrameofReference_11_12_1840_110008_11_14_11_112_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSPM2CSFFrameofReference_1_2_840_10008_1_4_1_12;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSPM2BRAINMASKFrameofReference_11_12_1840_110008_11_14_11_113_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSPM2BRAINMASKFrameofReference_1_2_840_10008_1_4_1_13;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSPM2AVG305T1FrameofReference_11_12_1840_110008_11_14_11_114_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSPM2AVG305T1FrameofReference_1_2_840_10008_1_4_1_14;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSPM2AVG152T1FrameofReference_11_12_1840_110008_11_14_11_115_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSPM2AVG152T1FrameofReference_1_2_840_10008_1_4_1_15;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSPM2AVG152T2FrameofReference_11_12_1840_110008_11_14_11_116_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSPM2AVG152T2FrameofReference_1_2_840_10008_1_4_1_16;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSPM2AVG152PDFrameofReference_11_12_1840_110008_11_14_11_117_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSPM2AVG152PDFrameofReference_1_2_840_10008_1_4_1_17;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSPM2SINGLESUBJT1FrameofReference_11_12_1840_110008_11_14_11_118_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSPM2SINGLESUBJT1FrameofReference_1_2_840_10008_1_4_1_18;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidICBM452T1FrameofReference_11_12_1840_110008_11_14_12_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidICBM452T1FrameofReference_1_2_840_10008_1_4_2_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidICBMSingleSubjectMRIFrameofReference_11_12_1840_110008_11_14_12_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidICBMSingleSubjectMRIFrameofReference_1_2_840_10008_1_4_2_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidHotIronColorPaletteSOPInstance_11_12_1840_110008_11_15_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidHotIronColorPaletteSOPInstance_1_2_840_10008_1_5_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPETColorPaletteSOPInstance_11_12_1840_110008_11_15_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPETColorPaletteSOPInstance_1_2_840_10008_1_5_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidHotMetalBlueColorPaletteSOPInstance_11_12_1840_110008_11_15_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidHotMetalBlueColorPaletteSOPInstance_1_2_840_10008_1_5_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPET20StepColorPaletteSOPInstance_11_12_1840_110008_11_15_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPET20StepColorPaletteSOPInstance_1_2_840_10008_1_5_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSpringColorPaletteSOPInstance_11_12_1840_110008_11_15_15_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSpringColorPaletteSOPInstance_1_2_840_10008_1_5_5;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSummerColorPaletteSOPInstance_11_12_1840_110008_11_15_16_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSummerColorPaletteSOPInstance_1_2_840_10008_1_5_6;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidFallColorPaletteSOPInstance_11_12_1840_110008_11_15_17_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidFallColorPaletteSOPInstance_1_2_840_10008_1_5_7;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidWinterColorPaletteSOPInstance_11_12_1840_110008_11_15_18_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidWinterColorPaletteSOPInstance_1_2_840_10008_1_5_8;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidBasicStudyContentNotificationSOPClass_11_12_1840_110008_11_19_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidBasicStudyContentNotificationSOPClass_1_2_840_10008_1_9;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPapyrus3ImplicitVRLittleEndian_11_12_1840_110008_11_120_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPapyrus3ImplicitVRLittleEndian_1_2_840_10008_1_20;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidStorageCommitmentPushModelSOPClass_11_12_1840_110008_11_120_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidStorageCommitmentPushModelSOPClass_1_2_840_10008_1_20_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidStorageCommitmentPushModelSOPInstance_11_12_1840_110008_11_120_11_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidStorageCommitmentPushModelSOPInstance_1_2_840_10008_1_20_1_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidStorageCommitmentPullModelSOPClass_11_12_1840_110008_11_120_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidStorageCommitmentPullModelSOPClass_1_2_840_10008_1_20_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidStorageCommitmentPullModelSOPInstance_11_12_1840_110008_11_120_12_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidStorageCommitmentPullModelSOPInstance_1_2_840_10008_1_20_2_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidProceduralEventLoggingSOPClass_11_12_1840_110008_11_140_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidProceduralEventLoggingSOPClass_1_2_840_10008_1_40;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidProceduralEventLoggingSOPInstance_11_12_1840_110008_11_140_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidProceduralEventLoggingSOPInstance_1_2_840_10008_1_40_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSubstanceAdministrationLoggingSOPClass_11_12_1840_110008_11_142_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSubstanceAdministrationLoggingSOPClass_1_2_840_10008_1_42;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSubstanceAdministrationLoggingSOPInstance_11_12_1840_110008_11_142_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSubstanceAdministrationLoggingSOPInstance_1_2_840_10008_1_42_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDICOMUIDRegistry_11_12_1840_110008_12_16_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDICOMUIDRegistry_1_2_840_10008_2_6_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDICOMControlledTerminology_11_12_1840_110008_12_116_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDICOMControlledTerminology_1_2_840_10008_2_16_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidAdultMouseAnatomyOntology_11_12_1840_110008_12_116_15_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidAdultMouseAnatomyOntology_1_2_840_10008_2_16_5;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidUberonOntology_11_12_1840_110008_12_116_16_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidUberonOntology_1_2_840_10008_2_16_6;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidIntegratedTaxonomicInformationSystemITISTaxonomicSerialNumberTSN_11_12_1840_110008_12_116_17_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidIntegratedTaxonomicInformationSystemITISTaxonomicSerialNumberTSN_1_2_840_10008_2_16_7;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidMouseGenomeInitiativeMGI_11_12_1840_110008_12_116_18_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidMouseGenomeInitiativeMGI_1_2_840_10008_2_16_8;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPubChemCompoundCID_11_12_1840_110008_12_116_19_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPubChemCompoundCID_1_2_840_10008_2_16_9;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDICOMApplicationContextName_11_12_1840_110008_13_11_11_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDICOMApplicationContextName_1_2_840_10008_3_1_1_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDetachedPatientManagementSOPClass_11_12_1840_110008_13_11_12_11_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDetachedPatientManagementSOPClass_1_2_840_10008_3_1_2_1_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDetachedPatientManagementMetaSOPClass_11_12_1840_110008_13_11_12_11_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDetachedPatientManagementMetaSOPClass_1_2_840_10008_3_1_2_1_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDetachedVisitManagementSOPClass_11_12_1840_110008_13_11_12_12_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDetachedVisitManagementSOPClass_1_2_840_10008_3_1_2_2_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDetachedStudyManagementSOPClass_11_12_1840_110008_13_11_12_13_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDetachedStudyManagementSOPClass_1_2_840_10008_3_1_2_3_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidStudyComponentManagementSOPClass_11_12_1840_110008_13_11_12_13_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidStudyComponentManagementSOPClass_1_2_840_10008_3_1_2_3_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidModalityPerformedProcedureStepSOPClass_11_12_1840_110008_13_11_12_13_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidModalityPerformedProcedureStepSOPClass_1_2_840_10008_3_1_2_3_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidModalityPerformedProcedureStepRetrieveSOPClass_11_12_1840_110008_13_11_12_13_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidModalityPerformedProcedureStepRetrieveSOPClass_1_2_840_10008_3_1_2_3_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidModalityPerformedProcedureStepNotificationSOPClass_11_12_1840_110008_13_11_12_13_15_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidModalityPerformedProcedureStepNotificationSOPClass_1_2_840_10008_3_1_2_3_5;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDetachedResultsManagementSOPClass_11_12_1840_110008_13_11_12_15_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDetachedResultsManagementSOPClass_1_2_840_10008_3_1_2_5_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDetachedResultsManagementMetaSOPClass_11_12_1840_110008_13_11_12_15_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDetachedResultsManagementMetaSOPClass_1_2_840_10008_3_1_2_5_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDetachedStudyManagementMetaSOPClass_11_12_1840_110008_13_11_12_15_15_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDetachedStudyManagementMetaSOPClass_1_2_840_10008_3_1_2_5_5;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDetachedInterpretationManagementSOPClass_11_12_1840_110008_13_11_12_16_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDetachedInterpretationManagementSOPClass_1_2_840_10008_3_1_2_6_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidStorageServiceClass_11_12_1840_110008_14_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidStorageServiceClass_1_2_840_10008_4_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidBasicFilmSessionSOPClass_11_12_1840_110008_15_11_11_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidBasicFilmSessionSOPClass_1_2_840_10008_5_1_1_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidBasicFilmBoxSOPClass_11_12_1840_110008_15_11_11_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidBasicFilmBoxSOPClass_1_2_840_10008_5_1_1_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidBasicGrayscaleImageBoxSOPClass_11_12_1840_110008_15_11_11_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidBasicGrayscaleImageBoxSOPClass_1_2_840_10008_5_1_1_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidBasicColorImageBoxSOPClass_11_12_1840_110008_15_11_11_14_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidBasicColorImageBoxSOPClass_1_2_840_10008_5_1_1_4_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidReferencedImageBoxSOPClass_11_12_1840_110008_15_11_11_14_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidReferencedImageBoxSOPClass_1_2_840_10008_5_1_1_4_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidBasicGrayscalePrintManagementMetaSOPClass_11_12_1840_110008_15_11_11_19_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidBasicGrayscalePrintManagementMetaSOPClass_1_2_840_10008_5_1_1_9;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidReferencedGrayscalePrintManagementMetaSOPClass_11_12_1840_110008_15_11_11_19_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidReferencedGrayscalePrintManagementMetaSOPClass_1_2_840_10008_5_1_1_9_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPrintJobSOPClass_11_12_1840_110008_15_11_11_114_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPrintJobSOPClass_1_2_840_10008_5_1_1_14;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidBasicAnnotationBoxSOPClass_11_12_1840_110008_15_11_11_115_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidBasicAnnotationBoxSOPClass_1_2_840_10008_5_1_1_15;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPrinterSOPClass_11_12_1840_110008_15_11_11_116_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPrinterSOPClass_1_2_840_10008_5_1_1_16;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPrinterConfigurationRetrievalSOPClass_11_12_1840_110008_15_11_11_116_1376_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPrinterConfigurationRetrievalSOPClass_1_2_840_10008_5_1_1_16_376;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPrinterSOPInstance_11_12_1840_110008_15_11_11_117_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPrinterSOPInstance_1_2_840_10008_5_1_1_17;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPrinterConfigurationRetrievalSOPInstance_11_12_1840_110008_15_11_11_117_1376_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPrinterConfigurationRetrievalSOPInstance_1_2_840_10008_5_1_1_17_376;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidBasicColorPrintManagementMetaSOPClass_11_12_1840_110008_15_11_11_118_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidBasicColorPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_18;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidReferencedColorPrintManagementMetaSOPClass_11_12_1840_110008_15_11_11_118_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidReferencedColorPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_18_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidVOILUTBoxSOPClass_11_12_1840_110008_15_11_11_122_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidVOILUTBoxSOPClass_1_2_840_10008_5_1_1_22;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPresentationLUTSOPClass_11_12_1840_110008_15_11_11_123_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPresentationLUTSOPClass_1_2_840_10008_5_1_1_23;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidImageOverlayBoxSOPClass_11_12_1840_110008_15_11_11_124_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidImageOverlayBoxSOPClass_1_2_840_10008_5_1_1_24;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidBasicPrintImageOverlayBoxSOPClass_11_12_1840_110008_15_11_11_124_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidBasicPrintImageOverlayBoxSOPClass_1_2_840_10008_5_1_1_24_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPrintQueueSOPInstance_11_12_1840_110008_15_11_11_125_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPrintQueueSOPInstance_1_2_840_10008_5_1_1_25;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPrintQueueManagementSOPClass_11_12_1840_110008_15_11_11_126_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPrintQueueManagementSOPClass_1_2_840_10008_5_1_1_26;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidStoredPrintStorageSOPClass_11_12_1840_110008_15_11_11_127_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidStoredPrintStorageSOPClass_1_2_840_10008_5_1_1_27;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidHardcopyGrayscaleImageStorageSOPClass_11_12_1840_110008_15_11_11_129_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidHardcopyGrayscaleImageStorageSOPClass_1_2_840_10008_5_1_1_29;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidHardcopyColorImageStorageSOPClass_11_12_1840_110008_15_11_11_130_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidHardcopyColorImageStorageSOPClass_1_2_840_10008_5_1_1_30;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPullPrintRequestSOPClass_11_12_1840_110008_15_11_11_131_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPullPrintRequestSOPClass_1_2_840_10008_5_1_1_31;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPullStoredPrintManagementMetaSOPClass_11_12_1840_110008_15_11_11_132_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPullStoredPrintManagementMetaSOPClass_1_2_840_10008_5_1_1_32;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidMediaCreationManagementSOPClassUID_11_12_1840_110008_15_11_11_133_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidMediaCreationManagementSOPClassUID_1_2_840_10008_5_1_1_33;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDisplaySystemSOPClass_11_12_1840_110008_15_11_11_140_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDisplaySystemSOPClass_1_2_840_10008_5_1_1_40;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDisplaySystemSOPInstance_11_12_1840_110008_15_11_11_140_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDisplaySystemSOPInstance_1_2_840_10008_5_1_1_40_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidComputedRadiographyImageStorage_11_12_1840_110008_15_11_14_11_11_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidComputedRadiographyImageStorage_1_2_840_10008_5_1_4_1_1_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDigitalXRayImageStorageForPresentation_11_12_1840_110008_15_11_14_11_11_11_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDigitalXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDigitalXRayImageStorageForProcessing_11_12_1840_110008_15_11_14_11_11_11_11_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDigitalXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_1_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDigitalMammographyXRayImageStorageForPresentation_11_12_1840_110008_15_11_14_11_11_11_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDigitalMammographyXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDigitalMammographyXRayImageStorageForProcessing_11_12_1840_110008_15_11_14_11_11_11_12_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDigitalMammographyXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_2_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDigitalIntraOralXRayImageStorageForPresentation_11_12_1840_110008_15_11_14_11_11_11_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDigitalIntraOralXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_1_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDigitalIntraOralXRayImageStorageForProcessing_11_12_1840_110008_15_11_14_11_11_11_13_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDigitalIntraOralXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_1_3_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidCTImageStorage_11_12_1840_110008_15_11_14_11_11_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidCTImageStorage_1_2_840_10008_5_1_4_1_1_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidEnhancedCTImageStorage_11_12_1840_110008_15_11_14_11_11_12_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidEnhancedCTImageStorage_1_2_840_10008_5_1_4_1_1_2_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidLegacyConvertedEnhancedCTImageStorage_11_12_1840_110008_15_11_14_11_11_12_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidLegacyConvertedEnhancedCTImageStorage_1_2_840_10008_5_1_4_1_1_2_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidUltrasoundMultiframeImageStorageRetired_11_12_1840_110008_15_11_14_11_11_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidUltrasoundMultiframeImageStorageRetired_1_2_840_10008_5_1_4_1_1_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidUltrasoundMultiframeImageStorage_11_12_1840_110008_15_11_14_11_11_13_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidUltrasoundMultiframeImageStorage_1_2_840_10008_5_1_4_1_1_3_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidMRImageStorage_11_12_1840_110008_15_11_14_11_11_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidMRImageStorage_1_2_840_10008_5_1_4_1_1_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidEnhancedMRImageStorage_11_12_1840_110008_15_11_14_11_11_14_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidEnhancedMRImageStorage_1_2_840_10008_5_1_4_1_1_4_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidMRSpectroscopyStorage_11_12_1840_110008_15_11_14_11_11_14_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidMRSpectroscopyStorage_1_2_840_10008_5_1_4_1_1_4_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidEnhancedMRColorImageStorage_11_12_1840_110008_15_11_14_11_11_14_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidEnhancedMRColorImageStorage_1_2_840_10008_5_1_4_1_1_4_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidLegacyConvertedEnhancedMRImageStorage_11_12_1840_110008_15_11_14_11_11_14_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidLegacyConvertedEnhancedMRImageStorage_1_2_840_10008_5_1_4_1_1_4_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidUltrasoundImageStorageRetired_11_12_1840_110008_15_11_14_11_11_16_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidUltrasoundImageStorageRetired_1_2_840_10008_5_1_4_1_1_6;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidUltrasoundImageStorage_11_12_1840_110008_15_11_14_11_11_16_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidUltrasoundImageStorage_1_2_840_10008_5_1_4_1_1_6_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidEnhancedUSVolumeStorage_11_12_1840_110008_15_11_14_11_11_16_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidEnhancedUSVolumeStorage_1_2_840_10008_5_1_4_1_1_6_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSecondaryCaptureImageStorage_11_12_1840_110008_15_11_14_11_11_17_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidMultiframeSingleBitSecondaryCaptureImageStorage_11_12_1840_110008_15_11_14_11_11_17_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidMultiframeSingleBitSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidMultiframeGrayscaleByteSecondaryCaptureImageStorage_11_12_1840_110008_15_11_14_11_11_17_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidMultiframeGrayscaleByteSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidMultiframeGrayscaleWordSecondaryCaptureImageStorage_11_12_1840_110008_15_11_14_11_11_17_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidMultiframeGrayscaleWordSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidMultiframeTrueColorSecondaryCaptureImageStorage_11_12_1840_110008_15_11_14_11_11_17_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidMultiframeTrueColorSecondaryCaptureImageStorage_1_2_840_10008_5_1_4_1_1_7_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidStandaloneOverlayStorage_11_12_1840_110008_15_11_14_11_11_18_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidStandaloneOverlayStorage_1_2_840_10008_5_1_4_1_1_8;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidStandaloneCurveStorage_11_12_1840_110008_15_11_14_11_11_19_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidStandaloneCurveStorage_1_2_840_10008_5_1_4_1_1_9;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidWaveformStorageTrial_11_12_1840_110008_15_11_14_11_11_19_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidWaveformStorageTrial_1_2_840_10008_5_1_4_1_1_9_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uid12leadECGWaveformStorage_11_12_1840_110008_15_11_14_11_11_19_11_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uid12leadECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidGeneralECGWaveformStorage_11_12_1840_110008_15_11_14_11_11_19_11_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidGeneralECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidAmbulatoryECGWaveformStorage_11_12_1840_110008_15_11_14_11_11_19_11_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidAmbulatoryECGWaveformStorage_1_2_840_10008_5_1_4_1_1_9_1_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidHemodynamicWaveformStorage_11_12_1840_110008_15_11_14_11_11_19_12_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidHemodynamicWaveformStorage_1_2_840_10008_5_1_4_1_1_9_2_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidCardiacElectrophysiologyWaveformStorage_11_12_1840_110008_15_11_14_11_11_19_13_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidCardiacElectrophysiologyWaveformStorage_1_2_840_10008_5_1_4_1_1_9_3_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidBasicVoiceAudioWaveformStorage_11_12_1840_110008_15_11_14_11_11_19_14_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidBasicVoiceAudioWaveformStorage_1_2_840_10008_5_1_4_1_1_9_4_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidGeneralAudioWaveformStorage_11_12_1840_110008_15_11_14_11_11_19_14_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidGeneralAudioWaveformStorage_1_2_840_10008_5_1_4_1_1_9_4_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidArterialPulseWaveformStorage_11_12_1840_110008_15_11_14_11_11_19_15_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidArterialPulseWaveformStorage_1_2_840_10008_5_1_4_1_1_9_5_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRespiratoryWaveformStorage_11_12_1840_110008_15_11_14_11_11_19_16_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRespiratoryWaveformStorage_1_2_840_10008_5_1_4_1_1_9_6_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidStandaloneModalityLUTStorage_11_12_1840_110008_15_11_14_11_11_110_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidStandaloneModalityLUTStorage_1_2_840_10008_5_1_4_1_1_10;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidStandaloneVOILUTStorage_11_12_1840_110008_15_11_14_11_11_111_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidStandaloneVOILUTStorage_1_2_840_10008_5_1_4_1_1_11;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidGrayscaleSoftcopyPresentationStateStorage_11_12_1840_110008_15_11_14_11_11_111_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidGrayscaleSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidColorSoftcopyPresentationStateStorage_11_12_1840_110008_15_11_14_11_11_111_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidColorSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPseudoColorSoftcopyPresentationStateStorage_11_12_1840_110008_15_11_14_11_11_111_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPseudoColorSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidBlendingSoftcopyPresentationStateStorage_11_12_1840_110008_15_11_14_11_11_111_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidBlendingSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidXAXRFGrayscaleSoftcopyPresentationStateStorage_11_12_1840_110008_15_11_14_11_11_111_15_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidXAXRFGrayscaleSoftcopyPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_5;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidGrayscalePlanarMPRVolumetricPresentationStateStorage_11_12_1840_110008_15_11_14_11_11_111_16_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidGrayscalePlanarMPRVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_6;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidCompositingPlanarMPRVolumetricPresentationStateStorage_11_12_1840_110008_15_11_14_11_11_111_17_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidCompositingPlanarMPRVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_7;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidAdvancedBlendingPresentationStateStorage_11_12_1840_110008_15_11_14_11_11_111_18_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidAdvancedBlendingPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_8;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidVolumeRenderingVolumetricPresentationStateStorage_11_12_1840_110008_15_11_14_11_11_111_19_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_9;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSegmentedVolumeRenderingVolumetricPresentationStateStorage_11_12_1840_110008_15_11_14_11_11_111_110_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSegmentedVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_10;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidMultipleVolumeRenderingVolumetricPresentationStateStorage_11_12_1840_110008_15_11_14_11_11_111_111_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidMultipleVolumeRenderingVolumetricPresentationStateStorage_1_2_840_10008_5_1_4_1_1_11_11;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidXRayAngiographicImageStorage_11_12_1840_110008_15_11_14_11_11_112_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidXRayAngiographicImageStorage_1_2_840_10008_5_1_4_1_1_12_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidEnhancedXAImageStorage_11_12_1840_110008_15_11_14_11_11_112_11_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidEnhancedXAImageStorage_1_2_840_10008_5_1_4_1_1_12_1_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidXRayRadiofluoroscopicImageStorage_11_12_1840_110008_15_11_14_11_11_112_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidXRayRadiofluoroscopicImageStorage_1_2_840_10008_5_1_4_1_1_12_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidEnhancedXRFImageStorage_11_12_1840_110008_15_11_14_11_11_112_12_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidEnhancedXRFImageStorage_1_2_840_10008_5_1_4_1_1_12_2_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidXRayAngiographicBiPlaneImageStorage_11_12_1840_110008_15_11_14_11_11_112_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidXRayAngiographicBiPlaneImageStorage_1_2_840_10008_5_1_4_1_1_12_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidXRay3DAngiographicImageStorage_11_12_1840_110008_15_11_14_11_11_113_11_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidXRay3DAngiographicImageStorage_1_2_840_10008_5_1_4_1_1_13_1_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidXRay3DCraniofacialImageStorage_11_12_1840_110008_15_11_14_11_11_113_11_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidXRay3DCraniofacialImageStorage_1_2_840_10008_5_1_4_1_1_13_1_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidBreastTomosynthesisImageStorage_11_12_1840_110008_15_11_14_11_11_113_11_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidBreastTomosynthesisImageStorage_1_2_840_10008_5_1_4_1_1_13_1_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidBreastProjectionXRayImageStorageForPresentation_11_12_1840_110008_15_11_14_11_11_113_11_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidBreastProjectionXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_13_1_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidBreastProjectionXRayImageStorageForProcessing_11_12_1840_110008_15_11_14_11_11_113_11_15_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidBreastProjectionXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_13_1_5;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidIntravascularOpticalCoherenceTomographyImageStorageForPresentation_11_12_1840_110008_15_11_14_11_11_114_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidIntravascularOpticalCoherenceTomographyImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_14_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidIntravascularOpticalCoherenceTomographyImageStorageForProcessing_11_12_1840_110008_15_11_14_11_11_114_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidIntravascularOpticalCoherenceTomographyImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_14_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidNuclearMedicineImageStorageRetired_11_12_1840_110008_15_11_14_11_11_15_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidNuclearMedicineImageStorageRetired_1_2_840_10008_5_1_4_1_1_5;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidNuclearMedicineImageStorage_11_12_1840_110008_15_11_14_11_11_120_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidNuclearMedicineImageStorage_1_2_840_10008_5_1_4_1_1_20;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidParametricMapStorage_11_12_1840_110008_15_11_14_11_11_130_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidParametricMapStorage_1_2_840_10008_5_1_4_1_1_30;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRawDataStorage_11_12_1840_110008_15_11_14_11_11_166_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRawDataStorage_1_2_840_10008_5_1_4_1_1_66;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSpatialRegistrationStorage_11_12_1840_110008_15_11_14_11_11_166_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSpatialRegistrationStorage_1_2_840_10008_5_1_4_1_1_66_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSpatialFiducialsStorage_11_12_1840_110008_15_11_14_11_11_166_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSpatialFiducialsStorage_1_2_840_10008_5_1_4_1_1_66_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDeformableSpatialRegistrationStorage_11_12_1840_110008_15_11_14_11_11_166_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDeformableSpatialRegistrationStorage_1_2_840_10008_5_1_4_1_1_66_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSegmentationStorage_11_12_1840_110008_15_11_14_11_11_166_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSegmentationStorage_1_2_840_10008_5_1_4_1_1_66_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSurfaceSegmentationStorage_11_12_1840_110008_15_11_14_11_11_166_15_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSurfaceSegmentationStorage_1_2_840_10008_5_1_4_1_1_66_5;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidTractographyResultsStorage_11_12_1840_110008_15_11_14_11_11_166_16_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidTractographyResultsStorage_1_2_840_10008_5_1_4_1_1_66_6;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRealWorldValueMappingStorage_11_12_1840_110008_15_11_14_11_11_167_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRealWorldValueMappingStorage_1_2_840_10008_5_1_4_1_1_67;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSurfaceScanMeshStorage_11_12_1840_110008_15_11_14_11_11_168_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSurfaceScanMeshStorage_1_2_840_10008_5_1_4_1_1_68_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSurfaceScanPointCloudStorage_11_12_1840_110008_15_11_14_11_11_168_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSurfaceScanPointCloudStorage_1_2_840_10008_5_1_4_1_1_68_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidVLImageStorageTrial_11_12_1840_110008_15_11_14_11_11_177_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidVLImageStorageTrial_1_2_840_10008_5_1_4_1_1_77_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidVLMultiframeImageStorageTrial_11_12_1840_110008_15_11_14_11_11_177_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidVLMultiframeImageStorageTrial_1_2_840_10008_5_1_4_1_1_77_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidVLEndoscopicImageStorage_11_12_1840_110008_15_11_14_11_11_177_11_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidVLEndoscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidVideoEndoscopicImageStorage_11_12_1840_110008_15_11_14_11_11_177_11_11_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidVideoEndoscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_1_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidVLMicroscopicImageStorage_11_12_1840_110008_15_11_14_11_11_177_11_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidVLMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidVideoMicroscopicImageStorage_11_12_1840_110008_15_11_14_11_11_177_11_12_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidVideoMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_2_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidVLSlideCoordinatesMicroscopicImageStorage_11_12_1840_110008_15_11_14_11_11_177_11_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidVLSlideCoordinatesMicroscopicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidVLPhotographicImageStorage_11_12_1840_110008_15_11_14_11_11_177_11_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidVLPhotographicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidVideoPhotographicImageStorage_11_12_1840_110008_15_11_14_11_11_177_11_14_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidVideoPhotographicImageStorage_1_2_840_10008_5_1_4_1_1_77_1_4_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidOphthalmicPhotography8BitImageStorage_11_12_1840_110008_15_11_14_11_11_177_11_15_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidOphthalmicPhotography8BitImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidOphthalmicPhotography16BitImageStorage_11_12_1840_110008_15_11_14_11_11_177_11_15_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidOphthalmicPhotography16BitImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidStereometricRelationshipStorage_11_12_1840_110008_15_11_14_11_11_177_11_15_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidStereometricRelationshipStorage_1_2_840_10008_5_1_4_1_1_77_1_5_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidOphthalmicTomographyImageStorage_11_12_1840_110008_15_11_14_11_11_177_11_15_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidOphthalmicTomographyImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidWideFieldOphthalmicPhotographyStereographicProjectionImageStorage_11_12_1840_110008_15_11_14_11_11_177_11_15_15_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidWideFieldOphthalmicPhotographyStereographicProjectionImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_5;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidWideFieldOphthalmicPhotography3DCoordinatesImageStorage_11_12_1840_110008_15_11_14_11_11_177_11_15_16_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidWideFieldOphthalmicPhotography3DCoordinatesImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_6;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidOphthalmicOpticalCoherenceTomographyEnFaceImageStorage_11_12_1840_110008_15_11_14_11_11_177_11_15_17_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidOphthalmicOpticalCoherenceTomographyEnFaceImageStorage_1_2_840_10008_5_1_4_1_1_77_1_5_7;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidOphthalmicOpticalCoherenceTomographyBscanVolumeAnalysisStorage_11_12_1840_110008_15_11_14_11_11_177_11_15_18_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidOphthalmicOpticalCoherenceTomographyBscanVolumeAnalysisStorage_1_2_840_10008_5_1_4_1_1_77_1_5_8;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidVLWholeSlideMicroscopyImageStorage_11_12_1840_110008_15_11_14_11_11_177_11_16_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidVLWholeSlideMicroscopyImageStorage_1_2_840_10008_5_1_4_1_1_77_1_6;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidLensometryMeasurementsStorage_11_12_1840_110008_15_11_14_11_11_178_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidLensometryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidAutorefractionMeasurementsStorage_11_12_1840_110008_15_11_14_11_11_178_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidAutorefractionMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidKeratometryMeasurementsStorage_11_12_1840_110008_15_11_14_11_11_178_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidKeratometryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSubjectiveRefractionMeasurementsStorage_11_12_1840_110008_15_11_14_11_11_178_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSubjectiveRefractionMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidVisualAcuityMeasurementsStorage_11_12_1840_110008_15_11_14_11_11_178_15_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidVisualAcuityMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_5;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSpectaclePrescriptionReportStorage_11_12_1840_110008_15_11_14_11_11_178_16_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSpectaclePrescriptionReportStorage_1_2_840_10008_5_1_4_1_1_78_6;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidOphthalmicAxialMeasurementsStorage_11_12_1840_110008_15_11_14_11_11_178_17_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidOphthalmicAxialMeasurementsStorage_1_2_840_10008_5_1_4_1_1_78_7;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidIntraocularLensCalculationsStorage_11_12_1840_110008_15_11_14_11_11_178_18_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidIntraocularLensCalculationsStorage_1_2_840_10008_5_1_4_1_1_78_8;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidMacularGridThicknessandVolumeReportStorage_11_12_1840_110008_15_11_14_11_11_179_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidMacularGridThicknessandVolumeReportStorage_1_2_840_10008_5_1_4_1_1_79_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidOphthalmicVisualFieldStaticPerimetryMeasurementsStorage_11_12_1840_110008_15_11_14_11_11_180_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidOphthalmicVisualFieldStaticPerimetryMeasurementsStorage_1_2_840_10008_5_1_4_1_1_80_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidOphthalmicThicknessMapStorage_11_12_1840_110008_15_11_14_11_11_181_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidOphthalmicThicknessMapStorage_1_2_840_10008_5_1_4_1_1_81_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidCornealTopographyMapStorage_11_12_1840_110008_15_11_14_11_11_182_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidCornealTopographyMapStorage_1_2_840_10008_5_1_4_1_1_82_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidTextSRStorageTrial_11_12_1840_110008_15_11_14_11_11_188_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidTextSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidAudioSRStorageTrial_11_12_1840_110008_15_11_14_11_11_188_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidAudioSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDetailSRStorageTrial_11_12_1840_110008_15_11_14_11_11_188_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDetailSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidComprehensiveSRStorageTrial_11_12_1840_110008_15_11_14_11_11_188_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidComprehensiveSRStorageTrial_1_2_840_10008_5_1_4_1_1_88_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidBasicTextSRStorage_11_12_1840_110008_15_11_14_11_11_188_111_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidBasicTextSRStorage_1_2_840_10008_5_1_4_1_1_88_11;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidEnhancedSRStorage_11_12_1840_110008_15_11_14_11_11_188_122_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidEnhancedSRStorage_1_2_840_10008_5_1_4_1_1_88_22;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidComprehensiveSRStorage_11_12_1840_110008_15_11_14_11_11_188_133_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidComprehensiveSRStorage_1_2_840_10008_5_1_4_1_1_88_33;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidComprehensive3DSRStorage_11_12_1840_110008_15_11_14_11_11_188_134_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidComprehensive3DSRStorage_1_2_840_10008_5_1_4_1_1_88_34;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidExtensibleSRStorage_11_12_1840_110008_15_11_14_11_11_188_135_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidExtensibleSRStorage_1_2_840_10008_5_1_4_1_1_88_35;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidProcedureLogStorage_11_12_1840_110008_15_11_14_11_11_188_140_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidProcedureLogStorage_1_2_840_10008_5_1_4_1_1_88_40;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidMammographyCADSRStorage_11_12_1840_110008_15_11_14_11_11_188_150_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidMammographyCADSRStorage_1_2_840_10008_5_1_4_1_1_88_50;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidKeyObjectSelectionDocumentStorage_11_12_1840_110008_15_11_14_11_11_188_159_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidKeyObjectSelectionDocumentStorage_1_2_840_10008_5_1_4_1_1_88_59;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidChestCADSRStorage_11_12_1840_110008_15_11_14_11_11_188_165_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidChestCADSRStorage_1_2_840_10008_5_1_4_1_1_88_65;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidXRayRadiationDoseSRStorage_11_12_1840_110008_15_11_14_11_11_188_167_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidXRayRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_67;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRadiopharmaceuticalRadiationDoseSRStorage_11_12_1840_110008_15_11_14_11_11_188_168_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRadiopharmaceuticalRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_68;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidColonCADSRStorage_11_12_1840_110008_15_11_14_11_11_188_169_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidColonCADSRStorage_1_2_840_10008_5_1_4_1_1_88_69;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidImplantationPlanSRStorage_11_12_1840_110008_15_11_14_11_11_188_170_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidImplantationPlanSRStorage_1_2_840_10008_5_1_4_1_1_88_70;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidAcquisitionContextSRStorage_11_12_1840_110008_15_11_14_11_11_188_171_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidAcquisitionContextSRStorage_1_2_840_10008_5_1_4_1_1_88_71;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSimplifiedAdultEchoSRStorage_11_12_1840_110008_15_11_14_11_11_188_172_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSimplifiedAdultEchoSRStorage_1_2_840_10008_5_1_4_1_1_88_72;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPatientRadiationDoseSRStorage_11_12_1840_110008_15_11_14_11_11_188_173_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPatientRadiationDoseSRStorage_1_2_840_10008_5_1_4_1_1_88_73;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPlannedImagingAgentAdministrationSRStorage_11_12_1840_110008_15_11_14_11_11_188_174_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPlannedImagingAgentAdministrationSRStorage_1_2_840_10008_5_1_4_1_1_88_74;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPerformedImagingAgentAdministrationSRStorage_11_12_1840_110008_15_11_14_11_11_188_175_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPerformedImagingAgentAdministrationSRStorage_1_2_840_10008_5_1_4_1_1_88_75;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidContentAssessmentResultsStorage_11_12_1840_110008_15_11_14_11_11_190_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidContentAssessmentResultsStorage_1_2_840_10008_5_1_4_1_1_90_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidEncapsulatedPDFStorage_11_12_1840_110008_15_11_14_11_11_1104_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidEncapsulatedPDFStorage_1_2_840_10008_5_1_4_1_1_104_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidEncapsulatedCDAStorage_11_12_1840_110008_15_11_14_11_11_1104_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidEncapsulatedCDAStorage_1_2_840_10008_5_1_4_1_1_104_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidEncapsulatedSTLStorage_11_12_1840_110008_15_11_14_11_11_1104_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidEncapsulatedSTLStorage_1_2_840_10008_5_1_4_1_1_104_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPositronEmissionTomographyImageStorage_11_12_1840_110008_15_11_14_11_11_1128_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPositronEmissionTomographyImageStorage_1_2_840_10008_5_1_4_1_1_128;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidLegacyConvertedEnhancedPETImageStorage_11_12_1840_110008_15_11_14_11_11_1128_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidLegacyConvertedEnhancedPETImageStorage_1_2_840_10008_5_1_4_1_1_128_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidStandalonePETCurveStorage_11_12_1840_110008_15_11_14_11_11_1129_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidStandalonePETCurveStorage_1_2_840_10008_5_1_4_1_1_129;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidEnhancedPETImageStorage_11_12_1840_110008_15_11_14_11_11_1130_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidEnhancedPETImageStorage_1_2_840_10008_5_1_4_1_1_130;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidBasicStructuredDisplayStorage_11_12_1840_110008_15_11_14_11_11_1131_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidBasicStructuredDisplayStorage_1_2_840_10008_5_1_4_1_1_131;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidCTDefinedProcedureProtocolStorage_11_12_1840_110008_15_11_14_11_11_1200_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidCTDefinedProcedureProtocolStorage_1_2_840_10008_5_1_4_1_1_200_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidCTPerformedProcedureProtocolStorage_11_12_1840_110008_15_11_14_11_11_1200_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidCTPerformedProcedureProtocolStorage_1_2_840_10008_5_1_4_1_1_200_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidProtocolApprovalStorage_11_12_1840_110008_15_11_14_11_11_1200_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidProtocolApprovalStorage_1_2_840_10008_5_1_4_1_1_200_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidProtocolApprovalInformationModelFIND_11_12_1840_110008_15_11_14_11_11_1200_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidProtocolApprovalInformationModelFIND_1_2_840_10008_5_1_4_1_1_200_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidProtocolApprovalInformationModelMOVE_11_12_1840_110008_15_11_14_11_11_1200_15_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidProtocolApprovalInformationModelMOVE_1_2_840_10008_5_1_4_1_1_200_5;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidProtocolApprovalInformationModelGET_11_12_1840_110008_15_11_14_11_11_1200_16_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidProtocolApprovalInformationModelGET_1_2_840_10008_5_1_4_1_1_200_6;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRTImageStorage_11_12_1840_110008_15_11_14_11_11_1481_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRTImageStorage_1_2_840_10008_5_1_4_1_1_481_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRTDoseStorage_11_12_1840_110008_15_11_14_11_11_1481_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRTDoseStorage_1_2_840_10008_5_1_4_1_1_481_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRTStructureSetStorage_11_12_1840_110008_15_11_14_11_11_1481_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRTStructureSetStorage_1_2_840_10008_5_1_4_1_1_481_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRTBeamsTreatmentRecordStorage_11_12_1840_110008_15_11_14_11_11_1481_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRTBeamsTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRTPlanStorage_11_12_1840_110008_15_11_14_11_11_1481_15_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRTPlanStorage_1_2_840_10008_5_1_4_1_1_481_5;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRTBrachyTreatmentRecordStorage_11_12_1840_110008_15_11_14_11_11_1481_16_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRTBrachyTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_6;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRTTreatmentSummaryRecordStorage_11_12_1840_110008_15_11_14_11_11_1481_17_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRTTreatmentSummaryRecordStorage_1_2_840_10008_5_1_4_1_1_481_7;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRTIonPlanStorage_11_12_1840_110008_15_11_14_11_11_1481_18_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRTIonPlanStorage_1_2_840_10008_5_1_4_1_1_481_8;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRTIonBeamsTreatmentRecordStorage_11_12_1840_110008_15_11_14_11_11_1481_19_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRTIonBeamsTreatmentRecordStorage_1_2_840_10008_5_1_4_1_1_481_9;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRTPhysicianIntentStorage_11_12_1840_110008_15_11_14_11_11_1481_110_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRTPhysicianIntentStorage_1_2_840_10008_5_1_4_1_1_481_10;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRTSegmentAnnotationStorage_11_12_1840_110008_15_11_14_11_11_1481_111_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRTSegmentAnnotationStorage_1_2_840_10008_5_1_4_1_1_481_11;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDICOSCTImageStorage_11_12_1840_110008_15_11_14_11_11_1501_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDICOSCTImageStorage_1_2_840_10008_5_1_4_1_1_501_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDICOSDigitalXRayImageStorageForPresentation_11_12_1840_110008_15_11_14_11_11_1501_12_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDICOSDigitalXRayImageStorageForPresentation_1_2_840_10008_5_1_4_1_1_501_2_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDICOSDigitalXRayImageStorageForProcessing_11_12_1840_110008_15_11_14_11_11_1501_12_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDICOSDigitalXRayImageStorageForProcessing_1_2_840_10008_5_1_4_1_1_501_2_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDICOSThreatDetectionReportStorage_11_12_1840_110008_15_11_14_11_11_1501_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDICOSThreatDetectionReportStorage_1_2_840_10008_5_1_4_1_1_501_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDICOS2DAITStorage_11_12_1840_110008_15_11_14_11_11_1501_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDICOS2DAITStorage_1_2_840_10008_5_1_4_1_1_501_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDICOS3DAITStorage_11_12_1840_110008_15_11_14_11_11_1501_15_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDICOS3DAITStorage_1_2_840_10008_5_1_4_1_1_501_5;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDICOSQuadrupoleResonanceQRStorage_11_12_1840_110008_15_11_14_11_11_1501_16_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDICOSQuadrupoleResonanceQRStorage_1_2_840_10008_5_1_4_1_1_501_6;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidEddyCurrentImageStorage_11_12_1840_110008_15_11_14_11_11_1601_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidEddyCurrentImageStorage_1_2_840_10008_5_1_4_1_1_601_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidEddyCurrentMultiframeImageStorage_11_12_1840_110008_15_11_14_11_11_1601_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidEddyCurrentMultiframeImageStorage_1_2_840_10008_5_1_4_1_1_601_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPatientRootQueryRetrieveInformationModelFIND_11_12_1840_110008_15_11_14_11_12_11_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPatientRootQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_1_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPatientRootQueryRetrieveInformationModelMOVE_11_12_1840_110008_15_11_14_11_12_11_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPatientRootQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_1_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPatientRootQueryRetrieveInformationModelGET_11_12_1840_110008_15_11_14_11_12_11_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPatientRootQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_1_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidStudyRootQueryRetrieveInformationModelFIND_11_12_1840_110008_15_11_14_11_12_12_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidStudyRootQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_2_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidStudyRootQueryRetrieveInformationModelMOVE_11_12_1840_110008_15_11_14_11_12_12_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidStudyRootQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_2_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidStudyRootQueryRetrieveInformationModelGET_11_12_1840_110008_15_11_14_11_12_12_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidStudyRootQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_2_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPatientStudyOnlyQueryRetrieveInformationModelFIND_11_12_1840_110008_15_11_14_11_12_13_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPatientStudyOnlyQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_1_2_3_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPatientStudyOnlyQueryRetrieveInformationModelMOVE_11_12_1840_110008_15_11_14_11_12_13_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPatientStudyOnlyQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_1_2_3_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidPatientStudyOnlyQueryRetrieveInformationModelGET_11_12_1840_110008_15_11_14_11_12_13_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidPatientStudyOnlyQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_1_2_3_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidCompositeInstanceRootRetrieveMOVE_11_12_1840_110008_15_11_14_11_12_14_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidCompositeInstanceRootRetrieveMOVE_1_2_840_10008_5_1_4_1_2_4_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidCompositeInstanceRootRetrieveGET_11_12_1840_110008_15_11_14_11_12_14_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidCompositeInstanceRootRetrieveGET_1_2_840_10008_5_1_4_1_2_4_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidCompositeInstanceRetrieveWithoutBulkDataGET_11_12_1840_110008_15_11_14_11_12_15_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidCompositeInstanceRetrieveWithoutBulkDataGET_1_2_840_10008_5_1_4_1_2_5_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDefinedProcedureProtocolInformationModelFIND_11_12_1840_110008_15_11_14_120_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDefinedProcedureProtocolInformationModelFIND_1_2_840_10008_5_1_4_20_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDefinedProcedureProtocolInformationModelMOVE_11_12_1840_110008_15_11_14_120_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDefinedProcedureProtocolInformationModelMOVE_1_2_840_10008_5_1_4_20_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDefinedProcedureProtocolInformationModelGET_11_12_1840_110008_15_11_14_120_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDefinedProcedureProtocolInformationModelGET_1_2_840_10008_5_1_4_20_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidModalityWorklistInformationModelFIND_11_12_1840_110008_15_11_14_131_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidModalityWorklistInformationModelFIND_1_2_840_10008_5_1_4_31;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidGeneralPurposeWorklistManagementMetaSOPClass_11_12_1840_110008_15_11_14_132_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidGeneralPurposeWorklistManagementMetaSOPClass_1_2_840_10008_5_1_4_32;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidGeneralPurposeWorklistInformationModelFIND_11_12_1840_110008_15_11_14_132_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidGeneralPurposeWorklistInformationModelFIND_1_2_840_10008_5_1_4_32_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidGeneralPurposeScheduledProcedureStepSOPClass_11_12_1840_110008_15_11_14_132_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidGeneralPurposeScheduledProcedureStepSOPClass_1_2_840_10008_5_1_4_32_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidGeneralPurposePerformedProcedureStepSOPClass_11_12_1840_110008_15_11_14_132_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidGeneralPurposePerformedProcedureStepSOPClass_1_2_840_10008_5_1_4_32_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidInstanceAvailabilityNotificationSOPClass_11_12_1840_110008_15_11_14_133_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidInstanceAvailabilityNotificationSOPClass_1_2_840_10008_5_1_4_33;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRTBeamsDeliveryInstructionStorageTrial_11_12_1840_110008_15_11_14_134_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRTBeamsDeliveryInstructionStorageTrial_1_2_840_10008_5_1_4_34_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRTConventionalMachineVerificationTrial_11_12_1840_110008_15_11_14_134_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRTConventionalMachineVerificationTrial_1_2_840_10008_5_1_4_34_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRTIonMachineVerificationTrial_11_12_1840_110008_15_11_14_134_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRTIonMachineVerificationTrial_1_2_840_10008_5_1_4_34_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidUnifiedWorklistandProcedureStepServiceClassTrial_11_12_1840_110008_15_11_14_134_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidUnifiedWorklistandProcedureStepServiceClassTrial_1_2_840_10008_5_1_4_34_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidUnifiedProcedureStepPushSOPClassTrial_11_12_1840_110008_15_11_14_134_14_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidUnifiedProcedureStepPushSOPClassTrial_1_2_840_10008_5_1_4_34_4_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidUnifiedProcedureStepWatchSOPClassTrial_11_12_1840_110008_15_11_14_134_14_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidUnifiedProcedureStepWatchSOPClassTrial_1_2_840_10008_5_1_4_34_4_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidUnifiedProcedureStepPullSOPClassTrial_11_12_1840_110008_15_11_14_134_14_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidUnifiedProcedureStepPullSOPClassTrial_1_2_840_10008_5_1_4_34_4_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidUnifiedProcedureStepEventSOPClassTrial_11_12_1840_110008_15_11_14_134_14_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidUnifiedProcedureStepEventSOPClassTrial_1_2_840_10008_5_1_4_34_4_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidUPSGlobalSubscriptionSOPInstance_11_12_1840_110008_15_11_14_134_15_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidUPSGlobalSubscriptionSOPInstance_1_2_840_10008_5_1_4_34_5;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidUPSFilteredGlobalSubscriptionSOPInstance_11_12_1840_110008_15_11_14_134_15_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidUPSFilteredGlobalSubscriptionSOPInstance_1_2_840_10008_5_1_4_34_5_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidUnifiedWorklistandProcedureStepServiceClass_11_12_1840_110008_15_11_14_134_16_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidUnifiedWorklistandProcedureStepServiceClass_1_2_840_10008_5_1_4_34_6;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidUnifiedProcedureStepPushSOPClass_11_12_1840_110008_15_11_14_134_16_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidUnifiedProcedureStepPushSOPClass_1_2_840_10008_5_1_4_34_6_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidUnifiedProcedureStepWatchSOPClass_11_12_1840_110008_15_11_14_134_16_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidUnifiedProcedureStepWatchSOPClass_1_2_840_10008_5_1_4_34_6_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidUnifiedProcedureStepPullSOPClass_11_12_1840_110008_15_11_14_134_16_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidUnifiedProcedureStepPullSOPClass_1_2_840_10008_5_1_4_34_6_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidUnifiedProcedureStepEventSOPClass_11_12_1840_110008_15_11_14_134_16_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidUnifiedProcedureStepEventSOPClass_1_2_840_10008_5_1_4_34_6_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRTBeamsDeliveryInstructionStorage_11_12_1840_110008_15_11_14_134_17_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRTBeamsDeliveryInstructionStorage_1_2_840_10008_5_1_4_34_7;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRTConventionalMachineVerification_11_12_1840_110008_15_11_14_134_18_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRTConventionalMachineVerification_1_2_840_10008_5_1_4_34_8;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRTIonMachineVerification_11_12_1840_110008_15_11_14_134_19_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRTIonMachineVerification_1_2_840_10008_5_1_4_34_9;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidRTBrachyApplicationSetupDeliveryInstructionStorage_11_12_1840_110008_15_11_14_134_110_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidRTBrachyApplicationSetupDeliveryInstructionStorage_1_2_840_10008_5_1_4_34_10;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidGeneralRelevantPatientInformationQuery_11_12_1840_110008_15_11_14_137_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidGeneralRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidBreastImagingRelevantPatientInformationQuery_11_12_1840_110008_15_11_14_137_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidBreastImagingRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidCardiacRelevantPatientInformationQuery_11_12_1840_110008_15_11_14_137_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidCardiacRelevantPatientInformationQuery_1_2_840_10008_5_1_4_37_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidHangingProtocolStorage_11_12_1840_110008_15_11_14_138_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidHangingProtocolStorage_1_2_840_10008_5_1_4_38_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidHangingProtocolInformationModelFIND_11_12_1840_110008_15_11_14_138_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidHangingProtocolInformationModelFIND_1_2_840_10008_5_1_4_38_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidHangingProtocolInformationModelMOVE_11_12_1840_110008_15_11_14_138_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidHangingProtocolInformationModelMOVE_1_2_840_10008_5_1_4_38_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidHangingProtocolInformationModelGET_11_12_1840_110008_15_11_14_138_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidHangingProtocolInformationModelGET_1_2_840_10008_5_1_4_38_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidColorPaletteStorage_11_12_1840_110008_15_11_14_139_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidColorPaletteStorage_1_2_840_10008_5_1_4_39_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidColorPaletteQueryRetrieveInformationModelFIND_11_12_1840_110008_15_11_14_139_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidColorPaletteQueryRetrieveInformationModelFIND_1_2_840_10008_5_1_4_39_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidColorPaletteQueryRetrieveInformationModelMOVE_11_12_1840_110008_15_11_14_139_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidColorPaletteQueryRetrieveInformationModelMOVE_1_2_840_10008_5_1_4_39_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidColorPaletteQueryRetrieveInformationModelGET_11_12_1840_110008_15_11_14_139_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidColorPaletteQueryRetrieveInformationModelGET_1_2_840_10008_5_1_4_39_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidProductCharacteristicsQuerySOPClass_11_12_1840_110008_15_11_14_141_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidProductCharacteristicsQuerySOPClass_1_2_840_10008_5_1_4_41;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidSubstanceApprovalQuerySOPClass_11_12_1840_110008_15_11_14_142_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidSubstanceApprovalQuerySOPClass_1_2_840_10008_5_1_4_42;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidGenericImplantTemplateStorage_11_12_1840_110008_15_11_14_143_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidGenericImplantTemplateStorage_1_2_840_10008_5_1_4_43_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidGenericImplantTemplateInformationModelFIND_11_12_1840_110008_15_11_14_143_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidGenericImplantTemplateInformationModelFIND_1_2_840_10008_5_1_4_43_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidGenericImplantTemplateInformationModelMOVE_11_12_1840_110008_15_11_14_143_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidGenericImplantTemplateInformationModelMOVE_1_2_840_10008_5_1_4_43_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidGenericImplantTemplateInformationModelGET_11_12_1840_110008_15_11_14_143_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidGenericImplantTemplateInformationModelGET_1_2_840_10008_5_1_4_43_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidImplantAssemblyTemplateStorage_11_12_1840_110008_15_11_14_144_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidImplantAssemblyTemplateStorage_1_2_840_10008_5_1_4_44_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidImplantAssemblyTemplateInformationModelFIND_11_12_1840_110008_15_11_14_144_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidImplantAssemblyTemplateInformationModelFIND_1_2_840_10008_5_1_4_44_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidImplantAssemblyTemplateInformationModelMOVE_11_12_1840_110008_15_11_14_144_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidImplantAssemblyTemplateInformationModelMOVE_1_2_840_10008_5_1_4_44_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidImplantAssemblyTemplateInformationModelGET_11_12_1840_110008_15_11_14_144_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidImplantAssemblyTemplateInformationModelGET_1_2_840_10008_5_1_4_44_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidImplantTemplateGroupStorage_11_12_1840_110008_15_11_14_145_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidImplantTemplateGroupStorage_1_2_840_10008_5_1_4_45_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidImplantTemplateGroupInformationModelFIND_11_12_1840_110008_15_11_14_145_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidImplantTemplateGroupInformationModelFIND_1_2_840_10008_5_1_4_45_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidImplantTemplateGroupInformationModelMOVE_11_12_1840_110008_15_11_14_145_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidImplantTemplateGroupInformationModelMOVE_1_2_840_10008_5_1_4_45_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidImplantTemplateGroupInformationModelGET_11_12_1840_110008_15_11_14_145_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidImplantTemplateGroupInformationModelGET_1_2_840_10008_5_1_4_45_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidNativeDICOMModel_11_12_1840_110008_17_11_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidNativeDICOMModel_1_2_840_10008_7_1_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidAbstractMultiDimensionalImageModel_11_12_1840_110008_17_11_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidAbstractMultiDimensionalImageModel_1_2_840_10008_7_1_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidDICOMContentMappingResource_11_12_1840_110008_18_11_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidDICOMContentMappingResource_1_2_840_10008_8_1_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomDeviceName_11_12_1840_110008_115_10_13_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomDeviceName_1_2_840_10008_15_0_3_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomDescription_11_12_1840_110008_115_10_13_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomDescription_1_2_840_10008_15_0_3_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomManufacturer_11_12_1840_110008_115_10_13_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomManufacturer_1_2_840_10008_15_0_3_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomManufacturerModelName_11_12_1840_110008_115_10_13_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomManufacturerModelName_1_2_840_10008_15_0_3_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomSoftwareVersion_11_12_1840_110008_115_10_13_15_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomSoftwareVersion_1_2_840_10008_15_0_3_5;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomVendorData_11_12_1840_110008_115_10_13_16_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomVendorData_1_2_840_10008_15_0_3_6;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomAETitle_11_12_1840_110008_115_10_13_17_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomAETitle_1_2_840_10008_15_0_3_7;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomNetworkConnectionReference_11_12_1840_110008_115_10_13_18_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomNetworkConnectionReference_1_2_840_10008_15_0_3_8;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomApplicationCluster_11_12_1840_110008_115_10_13_19_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomApplicationCluster_1_2_840_10008_15_0_3_9;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomAssociationInitiator_11_12_1840_110008_115_10_13_110_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomAssociationInitiator_1_2_840_10008_15_0_3_10;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomAssociationAcceptor_11_12_1840_110008_115_10_13_111_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomAssociationAcceptor_1_2_840_10008_15_0_3_11;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomHostname_11_12_1840_110008_115_10_13_112_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomHostname_1_2_840_10008_15_0_3_12;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomPort_11_12_1840_110008_115_10_13_113_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomPort_1_2_840_10008_15_0_3_13;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomSOPClass_11_12_1840_110008_115_10_13_114_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomSOPClass_1_2_840_10008_15_0_3_14;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomTransferRole_11_12_1840_110008_115_10_13_115_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomTransferRole_1_2_840_10008_15_0_3_15;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomTransferSyntax_11_12_1840_110008_115_10_13_116_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomTransferSyntax_1_2_840_10008_15_0_3_16;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomPrimaryDeviceType_11_12_1840_110008_115_10_13_117_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomPrimaryDeviceType_1_2_840_10008_15_0_3_17;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomRelatedDeviceReference_11_12_1840_110008_115_10_13_118_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomRelatedDeviceReference_1_2_840_10008_15_0_3_18;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomPreferredCalledAETitle_11_12_1840_110008_115_10_13_119_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomPreferredCalledAETitle_1_2_840_10008_15_0_3_19;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomTLSCyphersuite_11_12_1840_110008_115_10_13_120_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomTLSCyphersuite_1_2_840_10008_15_0_3_20;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomAuthorizedNodeCertificateReference_11_12_1840_110008_115_10_13_121_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomAuthorizedNodeCertificateReference_1_2_840_10008_15_0_3_21;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomThisNodeCertificateReference_11_12_1840_110008_115_10_13_122_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomThisNodeCertificateReference_1_2_840_10008_15_0_3_22;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomInstalled_11_12_1840_110008_115_10_13_123_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomInstalled_1_2_840_10008_15_0_3_23;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomStationName_11_12_1840_110008_115_10_13_124_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomStationName_1_2_840_10008_15_0_3_24;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomDeviceSerialNumber_11_12_1840_110008_115_10_13_125_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomDeviceSerialNumber_1_2_840_10008_15_0_3_25;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomInstitutionName_11_12_1840_110008_115_10_13_126_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomInstitutionName_1_2_840_10008_15_0_3_26;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomInstitutionAddress_11_12_1840_110008_115_10_13_127_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomInstitutionAddress_1_2_840_10008_15_0_3_27;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomInstitutionDepartmentName_11_12_1840_110008_115_10_13_128_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomInstitutionDepartmentName_1_2_840_10008_15_0_3_28;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomIssuerOfPatientID_11_12_1840_110008_115_10_13_129_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomIssuerOfPatientID_1_2_840_10008_15_0_3_29;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomPreferredCallingAETitle_11_12_1840_110008_115_10_13_130_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomPreferredCallingAETitle_1_2_840_10008_15_0_3_30;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomSupportedCharacterSet_11_12_1840_110008_115_10_13_131_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomSupportedCharacterSet_1_2_840_10008_15_0_3_31;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomConfigurationRoot_11_12_1840_110008_115_10_14_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomConfigurationRoot_1_2_840_10008_15_0_4_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomDevicesRoot_11_12_1840_110008_115_10_14_12_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomDevicesRoot_1_2_840_10008_15_0_4_2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomUniqueAETitlesRegistryRoot_11_12_1840_110008_115_10_14_13_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomUniqueAETitlesRegistryRoot_1_2_840_10008_15_0_4_3;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomDevice_11_12_1840_110008_115_10_14_14_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomDevice_1_2_840_10008_15_0_4_4;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomNetworkAE_11_12_1840_110008_115_10_14_15_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomNetworkAE_1_2_840_10008_15_0_4_5;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomNetworkConnection_11_12_1840_110008_115_10_14_16_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomNetworkConnection_1_2_840_10008_15_0_4_6;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomUniqueAETitle_11_12_1840_110008_115_10_14_17_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomUniqueAETitle_1_2_840_10008_15_0_4_7;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uiddicomTransferCapability_11_12_1840_110008_115_10_14_18_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uiddicomTransferCapability_1_2_840_10008_15_0_4_8;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_uidUniversalCoordinatedTime_11_12_1840_110008_115_11_11_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)imebra::uidUniversalCoordinatedTime_1_2_840_10008_15_1_1;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TagId_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::TagId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::TagId *)new imebra::TagId();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TagId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TagId_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::uint16_t arg1 ;
  std::uint16_t arg2 ;
  imebra::TagId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::uint16_t)jarg1; 
  arg2 = (std::uint16_t)jarg2; 
  {
    try {
      result = (imebra::TagId *)new imebra::TagId(arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TagId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TagId_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::uint16_t arg1 ;
  std::uint32_t arg2 ;
  std::uint16_t arg3 ;
  imebra::TagId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::uint16_t)jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  arg3 = (std::uint16_t)jarg3; 
  {
    try {
      result = (imebra::TagId *)new imebra::TagId(arg1,arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TagId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TagId_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TagId *arg1 = 0 ;
  imebra::TagId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TagId **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::TagId *)new imebra::TagId((imebra::TagId const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TagId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TagId_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::TagId *arg1 = (imebra::TagId *) 0 ;
  imebra::TagId *arg2 = 0 ;
  imebra::TagId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::TagId **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::TagId *) &(arg1)->operator =((imebra::TagId const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TagId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1TagId(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::TagId *arg1 = (imebra::TagId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::TagId **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_TagId_1getGroupId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::TagId *arg1 = (imebra::TagId *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TagId **)&jarg1; 
  {
    try {
      result = (std::uint16_t)((imebra::TagId const *)arg1)->getGroupId();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TagId_1getGroupOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TagId *arg1 = (imebra::TagId *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TagId **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::TagId const *)arg1)->getGroupOrder();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_TagId_1getTagId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::TagId *arg1 = (imebra::TagId *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TagId **)&jarg1; 
  {
    try {
      result = (std::uint16_t)((imebra::TagId const *)arg1)->getTagId();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_ageUnit_1t_1days_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::ageUnit_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::ageUnit_t)imebra::ageUnit_t::days;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_ageUnit_1t_1weeks_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::ageUnit_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::ageUnit_t)imebra::ageUnit_t::weeks;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_ageUnit_1t_1months_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::ageUnit_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::ageUnit_t)imebra::ageUnit_t::months;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_ageUnit_1t_1years_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::ageUnit_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::ageUnit_t)imebra::ageUnit_t::years;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_imageQuality_1t_1veryHigh_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::imageQuality_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::imageQuality_t)imebra::imageQuality_t::veryHigh;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_imageQuality_1t_1high_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::imageQuality_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::imageQuality_t)imebra::imageQuality_t::high;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_imageQuality_1t_1aboveMedium_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::imageQuality_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::imageQuality_t)imebra::imageQuality_t::aboveMedium;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_imageQuality_1t_1medium_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::imageQuality_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::imageQuality_t)imebra::imageQuality_t::medium;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_imageQuality_1t_1belowMedium_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::imageQuality_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::imageQuality_t)imebra::imageQuality_t::belowMedium;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_imageQuality_1t_1low_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::imageQuality_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::imageQuality_t)imebra::imageQuality_t::low;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_imageQuality_1t_1veryLow_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::imageQuality_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::imageQuality_t)imebra::imageQuality_t::veryLow;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_bitDepth_1t_1depthU8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::bitDepth_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::bitDepth_t)imebra::bitDepth_t::depthU8;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_bitDepth_1t_1depthS8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::bitDepth_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::bitDepth_t)imebra::bitDepth_t::depthS8;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_bitDepth_1t_1depthU16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::bitDepth_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::bitDepth_t)imebra::bitDepth_t::depthU16;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_bitDepth_1t_1depthS16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::bitDepth_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::bitDepth_t)imebra::bitDepth_t::depthS16;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_bitDepth_1t_1depthU32_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::bitDepth_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::bitDepth_t)imebra::bitDepth_t::depthU32;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_bitDepth_1t_1depthS32_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::bitDepth_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::bitDepth_t)imebra::bitDepth_t::depthS32;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_overlayType_1t_1graphic_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::overlayType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::overlayType_t)imebra::overlayType_t::graphic;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_overlayType_1t_1ROI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::overlayType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::overlayType_t)imebra::overlayType_t::ROI;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1AE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::AE;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1AS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::AS;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1AT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::AT;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1CS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::CS;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1DA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::DA;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1DS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::DS;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1DT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::DT;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1FL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::FL;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1FD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::FD;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1IS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::IS;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1LO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::LO;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1LT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::LT;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1OB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::OB;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1SB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::SB;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1OD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::OD;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1OF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::OF;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1OL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::OL;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1OW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::OW;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1PN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::PN;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1SH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::SH;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1SL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::SL;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1SQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::SQ;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1SS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::SS;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1ST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::ST;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1TM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::TM;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1UC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::UC;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1UI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::UI;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1UL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::UL;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1UN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::UN;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1UR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::UR;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1US_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::US;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_tagVR_1t_1UT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::tagVR_t)imebra::tagVR_t::UT;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_drawBitmapType_1t_1drawBitmapRGB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::drawBitmapType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::drawBitmapType_t)imebra::drawBitmapType_t::drawBitmapRGB;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_drawBitmapType_1t_1drawBitmapBGR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::drawBitmapType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::drawBitmapType_t)imebra::drawBitmapType_t::drawBitmapBGR;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_drawBitmapType_1t_1drawBitmapRGBA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::drawBitmapType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::drawBitmapType_t)imebra::drawBitmapType_t::drawBitmapRGBA;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_drawBitmapType_1t_1drawBitmapBGRA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::drawBitmapType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::drawBitmapType_t)imebra::drawBitmapType_t::drawBitmapBGRA;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dicomVOIFunction_1t_1linear_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dicomVOIFunction_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dicomVOIFunction_t)imebra::dicomVOIFunction_t::linear;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dicomVOIFunction_1t_1linearExact_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dicomVOIFunction_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dicomVOIFunction_t)imebra::dicomVOIFunction_t::linearExact;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dicomVOIFunction_1t_1sigmoid_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dicomVOIFunction_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dicomVOIFunction_t)imebra::dicomVOIFunction_t::sigmoid;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1cStore_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::cStore;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1cGet_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::cGet;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1cFind_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::cFind;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1cMove_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::cMove;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1cCancel_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::cCancel;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1cEcho_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::cEcho;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1nEventReport_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::nEventReport;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1nGet_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::nGet;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1nSet_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::nSet;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1nAction_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::nAction;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1nCreate_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::nCreate;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1nDelete_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::nDelete;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandType_1t_1response_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandType_t)imebra::dimseCommandType_t::response;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandPriority_1t_1low_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandPriority_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandPriority_t)imebra::dimseCommandPriority_t::low;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandPriority_1t_1medium_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandPriority_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandPriority_t)imebra::dimseCommandPriority_t::medium;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseCommandPriority_1t_1high_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseCommandPriority_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseCommandPriority_t)imebra::dimseCommandPriority_t::high;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1success_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::success;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1unsupportedOptionalAttributes_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::unsupportedOptionalAttributes;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1cannotUpdateperformedProcedureStepObject_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::cannotUpdateperformedProcedureStepObject;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1unsupportedSOPClass_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::unsupportedSOPClass;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1outOfResources_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::outOfResources;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1outOfResourcesCannotCalculateNumberOfMatches_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::outOfResourcesCannotCalculateNumberOfMatches;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1outOfResourcesCannotPerformSubOperations_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::outOfResourcesCannotPerformSubOperations;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1moveDestinationUnknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::moveDestinationUnknown;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1identifierDoesNotMatchSOPClass_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::identifierDoesNotMatchSOPClass;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1subOperationCompletedWithErrors_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::subOperationCompletedWithErrors;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1elementDiscarded_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::elementDiscarded;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1datasetDoesNotMatchSOPClass_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::datasetDoesNotMatchSOPClass;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1UPSAlreadyCanceled_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::UPSAlreadyCanceled;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1coercedInvalidValuesToValidValues_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::coercedInvalidValuesToValidValues;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1UPSStateAlreadyCompleted_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::UPSStateAlreadyCompleted;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1unableToProcess_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::unableToProcess;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1moreThanOneMatchFound_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::moreThanOneMatchFound;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1CannotSupportRequestedTemplate_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::CannotSupportRequestedTemplate;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1UPSNotUpdated_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::UPSNotUpdated;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1transactionUIDNotProvided_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::transactionUIDNotProvided;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1UPSAlreadyInProgress_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::UPSAlreadyInProgress;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1canScheduleOnlyWithNCreate_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::canScheduleOnlyWithNCreate;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1UPSCannotChangeState_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::UPSCannotChangeState;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1instanceUIDDoesNotExist_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::instanceUIDDoesNotExist;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1unknownAETitle_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::unknownAETitle;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1UPSNotSchedule_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::UPSNotSchedule;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1UPSNotInProgress_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::UPSNotInProgress;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1UPSAlreadyCompleted_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::UPSAlreadyCompleted;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1performerCannotBeContacted_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::performerCannotBeContacted;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1performerDoesNotCancel_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::performerDoesNotCancel;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1unappropriateActionForInstance_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::unappropriateActionForInstance;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1SCPDoesNotSupportEventReports_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::SCPDoesNotSupportEventReports;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1canceled_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::canceled;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1pending_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::pending;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_dimseStatusCode_1t_1pendingWithWarnings_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  imebra::dimseStatusCode_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::dimseStatusCode_t)imebra::dimseStatusCode_t::pendingWithWarnings;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1Memory_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::Memory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::Memory *)new imebra::Memory();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Memory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1Memory_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  imebra::Memory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (jarg1) {
      arg1 = (char *) jenv->GetByteArrayElements(jarg1, 0);
      arg2 = (size_t) jenv->GetArrayLength(jarg1);
    } else {
      arg1 = 0;
      arg2 = 0;
    }
  }
  {
    try {
      result = (imebra::Memory *)new imebra::Memory((char const *)arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Memory **)&jresult = result; 
  {
    if (jarg1) jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg1, 0);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1Memory_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Memory *arg1 = 0 ;
  imebra::Memory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Memory **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Memory const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::Memory *)new imebra::Memory((imebra::Memory const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Memory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1Memory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::Memory *arg1 = (imebra::Memory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::Memory **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Memory_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Memory *arg1 = (imebra::Memory *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Memory **)&jarg1; 
  {
    try {
      result = ((imebra::Memory const *)arg1)->size();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Memory_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  imebra::Memory *arg1 = (imebra::Memory *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Memory **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  {
    try {
      result = ((imebra::Memory const *)arg1)->data(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Memory_1regionData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg4) {
  imebra::Memory *arg1 = (imebra::Memory *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Memory **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  arg4 = (size_t)jarg4; 
  {
    try {
      ((imebra::Memory const *)arg1)->regionData(arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_Memory_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imebra::Memory *arg1 = (imebra::Memory *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Memory **)&jarg1; 
  {
    try {
      result = (bool)((imebra::Memory const *)arg1)->empty();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MutableMemory_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::MutableMemory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::MutableMemory *)new imebra::MutableMemory();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableMemory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MutableMemory_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  imebra::MutableMemory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (imebra::MutableMemory *)new imebra::MutableMemory(arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableMemory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MutableMemory_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Memory *arg1 = 0 ;
  imebra::MutableMemory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Memory **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Memory const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::MutableMemory *)new imebra::MutableMemory((imebra::Memory const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableMemory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MutableMemory_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::MutableMemory *arg1 = 0 ;
  imebra::MutableMemory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableMemory **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::MutableMemory const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::MutableMemory *)new imebra::MutableMemory((imebra::MutableMemory const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableMemory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MutableMemory_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  imebra::MutableMemory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (jarg1) {
      arg1 = (char *) jenv->GetByteArrayElements(jarg1, 0);
      arg2 = (size_t) jenv->GetArrayLength(jarg1);
    } else {
      arg1 = 0;
      arg2 = 0;
    }
  }
  {
    try {
      result = (imebra::MutableMemory *)new imebra::MutableMemory((char const *)arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableMemory **)&jresult = result; 
  {
    if (jarg1) jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg1, 0);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1MutableMemory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::MutableMemory *arg1 = (imebra::MutableMemory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::MutableMemory **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableMemory_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::MutableMemory *arg1 = (imebra::MutableMemory *) 0 ;
  imebra::Memory *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableMemory **)&jarg1; 
  arg2 = *(imebra::Memory **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Memory const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((imebra::Memory const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableMemory_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  imebra::MutableMemory *arg1 = (imebra::MutableMemory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableMemory **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableMemory_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imebra::MutableMemory *arg1 = (imebra::MutableMemory *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableMemory **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->resize(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableMemory_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imebra::MutableMemory *arg1 = (imebra::MutableMemory *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableMemory **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableMemory_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  imebra::MutableMemory *arg1 = (imebra::MutableMemory *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableMemory **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  {
    try {
      (arg1)->assign((char const *)arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableMemory_1assignRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg4) {
  imebra::MutableMemory *arg1 = (imebra::MutableMemory *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableMemory **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->assignRegion((char const *)arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MemoryPool_1flush(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  {
    try {
      imebra::MemoryPool::flush();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MemoryPool_1getUnusedMemorySize(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = imebra::MemoryPool::getUnusedMemorySize();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MemoryPool_1setMemoryPoolSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  size_t arg1 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      imebra::MemoryPool::setMemoryPoolSize(arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MemoryPool(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::MemoryPool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::MemoryPool *)new imebra::MemoryPool();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MemoryPool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1MemoryPool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::MemoryPool *arg1 = (imebra::MemoryPool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::MemoryPool **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1BaseStreamInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::BaseStreamInput *arg1 = 0 ;
  imebra::BaseStreamInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::BaseStreamInput **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::BaseStreamInput const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::BaseStreamInput *)new imebra::BaseStreamInput((imebra::BaseStreamInput const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::BaseStreamInput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1BaseStreamInput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::BaseStreamInput *arg1 = (imebra::BaseStreamInput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::BaseStreamInput **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1StreamTimeout_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::BaseStreamInput *arg1 = 0 ;
  std::uint32_t arg2 ;
  imebra::StreamTimeout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::BaseStreamInput **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::BaseStreamInput & reference is null");
    return 0;
  } 
  arg2 = (std::uint32_t)jarg2; 
  {
    try {
      result = (imebra::StreamTimeout *)new imebra::StreamTimeout(*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamTimeout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1StreamTimeout_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::StreamTimeout *arg1 = 0 ;
  imebra::StreamTimeout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::StreamTimeout **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::StreamTimeout const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::StreamTimeout *)new imebra::StreamTimeout((imebra::StreamTimeout const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamTimeout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1StreamTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::StreamTimeout *arg1 = (imebra::StreamTimeout *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::StreamTimeout **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1BaseStreamOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::BaseStreamOutput *arg1 = 0 ;
  imebra::BaseStreamOutput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::BaseStreamOutput **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::BaseStreamOutput const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::BaseStreamOutput *)new imebra::BaseStreamOutput((imebra::BaseStreamOutput const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::BaseStreamOutput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1BaseStreamOutput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::BaseStreamOutput *arg1 = (imebra::BaseStreamOutput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::BaseStreamOutput **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1StreamReader_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::BaseStreamInput *arg1 = 0 ;
  imebra::StreamReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::BaseStreamInput **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::BaseStreamInput const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::StreamReader *)new imebra::StreamReader((imebra::BaseStreamInput const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1StreamReader_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::BaseStreamInput *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  imebra::StreamReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::BaseStreamInput **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::BaseStreamInput const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (imebra::StreamReader *)new imebra::StreamReader((imebra::BaseStreamInput const &)*arg1,arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1StreamReader_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::StreamReader *arg1 = 0 ;
  imebra::StreamReader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::StreamReader **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::StreamReader const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::StreamReader *)new imebra::StreamReader((imebra::StreamReader const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamReader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_StreamReader_1getVirtualStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::StreamReader *arg1 = (imebra::StreamReader *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::StreamReader > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::StreamReader **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (arg1)->getVirtualStream(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamReader **)&jresult = new imebra::StreamReader((const imebra::StreamReader &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_StreamReader_1read_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  imebra::StreamReader *arg1 = (imebra::StreamReader *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::StreamReader **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  {
    try {
      (arg1)->read(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_StreamReader_1readSome_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  imebra::StreamReader *arg1 = (imebra::StreamReader *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::StreamReader **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  {
    try {
      result = (arg1)->readSome(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_StreamReader_1read_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::StreamReader *arg1 = (imebra::StreamReader *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::Memory > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::StreamReader **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (arg1)->read(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Memory **)&jresult = new imebra::Memory((const imebra::Memory &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_StreamReader_1readSome_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::StreamReader *arg1 = (imebra::StreamReader *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::Memory > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::StreamReader **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (arg1)->readSome(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Memory **)&jresult = new imebra::Memory((const imebra::Memory &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_StreamReader_1terminate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  imebra::StreamReader *arg1 = (imebra::StreamReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::StreamReader **)&jarg1; 
  {
    try {
      (arg1)->terminate();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1StreamReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::StreamReader *arg1 = (imebra::StreamReader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::StreamReader **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1StreamWriter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::BaseStreamOutput *arg1 = 0 ;
  imebra::StreamWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::BaseStreamOutput **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::BaseStreamOutput const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::StreamWriter *)new imebra::StreamWriter((imebra::BaseStreamOutput const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1StreamWriter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::BaseStreamOutput *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  imebra::StreamWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::BaseStreamOutput **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::BaseStreamOutput const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (imebra::StreamWriter *)new imebra::StreamWriter((imebra::BaseStreamOutput const &)*arg1,arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1StreamWriter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::StreamWriter *arg1 = 0 ;
  imebra::StreamWriter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::StreamWriter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::StreamWriter const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::StreamWriter *)new imebra::StreamWriter((imebra::StreamWriter const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamWriter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_StreamWriter_1write_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  imebra::StreamWriter *arg1 = (imebra::StreamWriter *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::StreamWriter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->write((char const *)arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_StreamWriter_1write_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::StreamWriter *arg1 = (imebra::StreamWriter *) 0 ;
  imebra::Memory *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::StreamWriter **)&jarg1; 
  arg2 = *(imebra::Memory **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Memory const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->write((imebra::Memory const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_StreamWriter_1flush(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  imebra::StreamWriter *arg1 = (imebra::StreamWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::StreamWriter **)&jarg1; 
  {
    try {
      (arg1)->flush();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1StreamWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::StreamWriter *arg1 = (imebra::StreamWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::StreamWriter **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1ReadingDataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = 0 ;
  imebra::ReadingDataHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::ReadingDataHandler const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::ReadingDataHandler *)new imebra::ReadingDataHandler((imebra::ReadingDataHandler const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadingDataHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1ReadingDataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  {
    try {
      result = ((imebra::ReadingDataHandler const *)arg1)->getSize();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getDataType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  {
    try {
      result = (imebra::tagVR_t)((imebra::ReadingDataHandler const *)arg1)->getDataType();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getInt32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  std::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (std::int32_t)((imebra::ReadingDataHandler const *)arg1)->getInt32(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getSignedLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  std::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (std::int32_t)((imebra::ReadingDataHandler const *)arg1)->getSignedLong(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getUint32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (std::uint32_t)((imebra::ReadingDataHandler const *)arg1)->getUint32(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getUnsignedLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (std::uint32_t)((imebra::ReadingDataHandler const *)arg1)->getUnsignedLong(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getInt16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jshort jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  std::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (std::int16_t)((imebra::ReadingDataHandler const *)arg1)->getInt16(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getUint16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (std::uint16_t)((imebra::ReadingDataHandler const *)arg1)->getUint16(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getInt8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jbyte jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  std::int8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (std::int8_t)((imebra::ReadingDataHandler const *)arg1)->getInt8(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getUint8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jshort jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  std::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (std::uint8_t)((imebra::ReadingDataHandler const *)arg1)->getUint8(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (double)((imebra::ReadingDataHandler const *)arg1)->getDouble(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (float)((imebra::ReadingDataHandler const *)arg1)->getFloat(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((imebra::ReadingDataHandler const *)arg1)->getString(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::Date > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((imebra::ReadingDataHandler const *)arg1)->getDate(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Date **)&jresult = new imebra::Date((const imebra::Date &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getAge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::Age > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((imebra::ReadingDataHandler const *)arg1)->getAge(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Age **)&jresult = new imebra::Age((const imebra::Age &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadingDataHandler_1getPatientName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::ReadingDataHandler *arg1 = (imebra::ReadingDataHandler *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::PatientName > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((imebra::ReadingDataHandler const *)arg1)->getPatientName(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::PatientName **)&jresult = new imebra::PatientName((const imebra::PatientName &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1ReadingDataHandlerNumeric(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::ReadingDataHandlerNumeric *arg1 = 0 ;
  imebra::ReadingDataHandlerNumeric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandlerNumeric **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::ReadingDataHandlerNumeric const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::ReadingDataHandlerNumeric *)new imebra::ReadingDataHandlerNumeric((imebra::ReadingDataHandlerNumeric const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadingDataHandlerNumeric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1ReadingDataHandlerNumeric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::ReadingDataHandlerNumeric **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadingDataHandlerNumeric_1getMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  SwigValueWrapper< imebra::Memory > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandlerNumeric **)&jarg1; 
  {
    try {
      result = ((imebra::ReadingDataHandlerNumeric const *)arg1)->getMemory();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Memory **)&jresult = new imebra::Memory((const imebra::Memory &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadingDataHandlerNumeric_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandlerNumeric **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  {
    try {
      result = ((imebra::ReadingDataHandlerNumeric const *)arg1)->data(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadingDataHandlerNumeric_1getUnitSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandlerNumeric **)&jarg1; 
  {
    try {
      result = ((imebra::ReadingDataHandlerNumeric const *)arg1)->getUnitSize();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_ReadingDataHandlerNumeric_1isSigned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandlerNumeric **)&jarg1; 
  {
    try {
      result = (bool)((imebra::ReadingDataHandlerNumeric const *)arg1)->isSigned();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_ReadingDataHandlerNumeric_1isFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ReadingDataHandlerNumeric **)&jarg1; 
  {
    try {
      result = (bool)((imebra::ReadingDataHandlerNumeric const *)arg1)->isFloat();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_ReadingDataHandlerNumeric_1copyTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::ReadingDataHandlerNumeric *arg1 = (imebra::ReadingDataHandlerNumeric *) 0 ;
  imebra::WritingDataHandlerNumeric *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::ReadingDataHandlerNumeric **)&jarg1; 
  arg2 = *(imebra::WritingDataHandlerNumeric **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::WritingDataHandlerNumeric const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyTo((imebra::WritingDataHandlerNumeric const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1WritingDataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::WritingDataHandler *arg1 = 0 ;
  imebra::WritingDataHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::WritingDataHandler const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::WritingDataHandler *)new imebra::WritingDataHandler((imebra::WritingDataHandler const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1WritingDataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->setSize(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  {
    try {
      result = ((imebra::WritingDataHandler const *)arg1)->getSize();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1getDataType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  {
    try {
      result = (imebra::tagVR_t)((imebra::WritingDataHandler const *)arg1)->getDataType();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setInt32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  std::int32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (std::int32_t)jarg3; 
  {
    try {
      (arg1)->setInt32(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setSignedLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  std::int32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (std::int32_t)jarg3; 
  {
    try {
      (arg1)->setSignedLong(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setUint32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  std::uint32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  {
    try {
      (arg1)->setUint32(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setUnsignedLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  std::uint32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  {
    try {
      (arg1)->setUnsignedLong(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setInt16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jshort jarg3) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  std::int16_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (std::int16_t)jarg3; 
  {
    try {
      (arg1)->setInt16(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setUint16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  std::uint16_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (std::uint16_t)jarg3; 
  {
    try {
      (arg1)->setUint16(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setInt8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jbyte jarg3) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  std::int8_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (std::int8_t)jarg3; 
  {
    try {
      (arg1)->setInt8(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setUint8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jshort jarg3) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  std::uint8_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (std::uint8_t)jarg3; 
  {
    try {
      (arg1)->setUint8(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setDouble(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (float)jarg3; 
  {
    try {
      (arg1)->setFloat(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->setString(arg2,(std::string const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setUnicodeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  std::wstring *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(std::wstring **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setUnicodeString(arg2,(std::wstring const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  imebra::Date *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(imebra::Date **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Date const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setDate(arg2,(imebra::Date const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setAge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  imebra::Age *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(imebra::Age **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Age const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setAge(arg2,(imebra::Age const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandler_1setPatientName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  imebra::WritingDataHandler *arg1 = (imebra::WritingDataHandler *) 0 ;
  size_t arg2 ;
  imebra::PatientName *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(imebra::WritingDataHandler **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(imebra::PatientName **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::PatientName const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setPatientName(arg2,(imebra::PatientName const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1WritingDataHandlerNumeric(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::WritingDataHandlerNumeric *arg1 = 0 ;
  imebra::WritingDataHandlerNumeric *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandlerNumeric **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::WritingDataHandlerNumeric const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::WritingDataHandlerNumeric *)new imebra::WritingDataHandlerNumeric((imebra::WritingDataHandlerNumeric const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandlerNumeric **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1WritingDataHandlerNumeric(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::WritingDataHandlerNumeric **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_WritingDataHandlerNumeric_1getMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  SwigValueWrapper< imebra::MutableMemory > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandlerNumeric **)&jarg1; 
  {
    try {
      result = ((imebra::WritingDataHandlerNumeric const *)arg1)->getMemory();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableMemory **)&jresult = new imebra::MutableMemory((const imebra::MutableMemory &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandlerNumeric_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandlerNumeric **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  {
    try {
      (arg1)->assign((char const *)arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_WritingDataHandlerNumeric_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2) {
  jlong jresult = 0 ;
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandlerNumeric **)&jarg1; 
  {
    if (jarg2) {
      arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  {
    try {
      result = ((imebra::WritingDataHandlerNumeric const *)arg1)->data(arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, 0);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_WritingDataHandlerNumeric_1getUnitSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandlerNumeric **)&jarg1; 
  {
    try {
      result = ((imebra::WritingDataHandlerNumeric const *)arg1)->getUnitSize();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_WritingDataHandlerNumeric_1isSigned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandlerNumeric **)&jarg1; 
  {
    try {
      result = (bool)((imebra::WritingDataHandlerNumeric const *)arg1)->isSigned();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_WritingDataHandlerNumeric_1isFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::WritingDataHandlerNumeric **)&jarg1; 
  {
    try {
      result = (bool)((imebra::WritingDataHandlerNumeric const *)arg1)->isFloat();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_WritingDataHandlerNumeric_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::WritingDataHandlerNumeric *arg1 = (imebra::WritingDataHandlerNumeric *) 0 ;
  imebra::ReadingDataHandlerNumeric *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::WritingDataHandlerNumeric **)&jarg1; 
  arg2 = *(imebra::ReadingDataHandlerNumeric **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::ReadingDataHandlerNumeric const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((imebra::ReadingDataHandlerNumeric const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1LUT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::LUT *arg1 = 0 ;
  imebra::LUT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::LUT **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::LUT const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::LUT *)new imebra::LUT((imebra::LUT const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::LUT **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1LUT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::LUT **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_LUT_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::LUT **)&jarg1; 
  {
    try {
      result = ((imebra::LUT const *)arg1)->getDescription();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(std::wstring **)&jresult = new std::wstring((const std::wstring &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_LUT_1getReadingDataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  SwigValueWrapper< imebra::ReadingDataHandlerNumeric > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::LUT **)&jarg1; 
  {
    try {
      result = ((imebra::LUT const *)arg1)->getReadingDataHandler();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadingDataHandlerNumeric **)&jresult = new imebra::ReadingDataHandlerNumeric((const imebra::ReadingDataHandlerNumeric &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_LUT_1getBits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::LUT **)&jarg1; 
  {
    try {
      result = ((imebra::LUT const *)arg1)->getBits();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_LUT_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::LUT **)&jarg1; 
  {
    try {
      result = ((imebra::LUT const *)arg1)->getSize();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_LUT_1getFirstMapped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  std::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::LUT **)&jarg1; 
  {
    try {
      result = (std::int32_t)((imebra::LUT const *)arg1)->getFirstMapped();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_LUT_1getMappedValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::LUT *arg1 = (imebra::LUT *) 0 ;
  std::int32_t arg2 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::LUT **)&jarg1; 
  arg2 = (std::int32_t)jarg2; 
  {
    try {
      result = (std::uint32_t)((imebra::LUT const *)arg1)->getMappedValue(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1Image(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Image *arg1 = 0 ;
  imebra::Image *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Image **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Image const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::Image *)new imebra::Image((imebra::Image const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Image **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1Image(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::Image **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Image_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Image **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::Image const *)arg1)->getWidth();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Image_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Image **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::Image const *)arg1)->getHeight();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Image_1getReadingDataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  SwigValueWrapper< imebra::ReadingDataHandlerNumeric > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Image **)&jarg1; 
  {
    try {
      result = ((imebra::Image const *)arg1)->getReadingDataHandler();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadingDataHandlerNumeric **)&jresult = new imebra::ReadingDataHandlerNumeric((const imebra::ReadingDataHandlerNumeric &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_Image_1getColorSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Image **)&jarg1; 
  {
    try {
      result = ((imebra::Image const *)arg1)->getColorSpace();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Image_1getChannelsNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Image **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::Image const *)arg1)->getChannelsNumber();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_Image_1getDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  imebra::bitDepth_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Image **)&jarg1; 
  {
    try {
      result = (imebra::bitDepth_t)((imebra::Image const *)arg1)->getDepth();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Image_1getHighBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Image *arg1 = (imebra::Image *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Image **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::Image const *)arg1)->getHighBit();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MutableImage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jstring jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  std::uint32_t arg1 ;
  std::uint32_t arg2 ;
  imebra::bitDepth_t arg3 ;
  std::string *arg4 = 0 ;
  std::uint32_t arg5 ;
  imebra::MutableImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::uint32_t)jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  arg3 = (imebra::bitDepth_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (std::uint32_t)jarg5; 
  {
    try {
      result = (imebra::MutableImage *)new imebra::MutableImage(arg1,arg2,arg3,(std::string const &)*arg4,arg5);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MutableImage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::MutableImage *arg1 = 0 ;
  imebra::MutableImage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableImage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::MutableImage const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::MutableImage *)new imebra::MutableImage((imebra::MutableImage const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableImage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1MutableImage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::MutableImage *arg1 = (imebra::MutableImage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::MutableImage **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableImage_1getWritingDataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::MutableImage *arg1 = (imebra::MutableImage *) 0 ;
  SwigValueWrapper< imebra::WritingDataHandlerNumeric > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableImage **)&jarg1; 
  {
    try {
      result = (arg1)->getWritingDataHandler();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandlerNumeric **)&jresult = new imebra::WritingDataHandlerNumeric((const imebra::WritingDataHandlerNumeric &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1Overlay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Overlay *arg1 = 0 ;
  imebra::Overlay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Overlay **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Overlay const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::Overlay *)new imebra::Overlay((imebra::Overlay const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Overlay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1Overlay(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::Overlay **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Overlay_1getFirstFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Overlay **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::Overlay const *)arg1)->getFirstFrame();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Overlay_1getFramesCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Overlay **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::Overlay const *)arg1)->getFramesCount();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_Overlay_1getZeroBasedOriginX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  std::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Overlay **)&jarg1; 
  {
    try {
      result = (std::int32_t)((imebra::Overlay const *)arg1)->getZeroBasedOriginX();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_Overlay_1getZeroBasedOriginY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  std::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Overlay **)&jarg1; 
  {
    try {
      result = (std::int32_t)((imebra::Overlay const *)arg1)->getZeroBasedOriginY();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_Overlay_1getOneBasedOriginX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  std::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Overlay **)&jarg1; 
  {
    try {
      result = (std::int32_t)((imebra::Overlay const *)arg1)->getOneBasedOriginX();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_Overlay_1getOneBasedOriginY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  std::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Overlay **)&jarg1; 
  {
    try {
      result = (std::int32_t)((imebra::Overlay const *)arg1)->getOneBasedOriginY();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_Overlay_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  imebra::overlayType_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Overlay **)&jarg1; 
  {
    try {
      result = (imebra::overlayType_t)((imebra::Overlay const *)arg1)->getType();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_Overlay_1getSubType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Overlay **)&jarg1; 
  {
    try {
      result = ((imebra::Overlay const *)arg1)->getSubType();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_Overlay_1getLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Overlay **)&jarg1; 
  {
    try {
      result = ((imebra::Overlay const *)arg1)->getLabel();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_Overlay_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Overlay **)&jarg1; 
  {
    try {
      result = ((imebra::Overlay const *)arg1)->getDescription();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Overlay_1getROIArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Overlay **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::Overlay const *)arg1)->getROIArea();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_imebraJNI_Overlay_1getROIMean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Overlay **)&jarg1; 
  {
    try {
      result = (double)((imebra::Overlay const *)arg1)->getROIMean();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_imebraJNI_Overlay_1getROIStandardDeviation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Overlay **)&jarg1; 
  {
    try {
      result = (double)(arg1)->getROIStandardDeviation();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Overlay_1getImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::Overlay *arg1 = (imebra::Overlay *) 0 ;
  std::uint32_t arg2 ;
  SwigValueWrapper< imebra::Image > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Overlay **)&jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  {
    try {
      result = ((imebra::Overlay const *)arg1)->getImage(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Image **)&jresult = new imebra::Image((const imebra::Image &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MutableOverlay_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jlong jarg3, jint jarg4, jint jarg5, jstring jarg6, jstring jarg7) {
  jlong jresult = 0 ;
  imebra::overlayType_t arg1 ;
  std::string *arg2 = 0 ;
  std::uint32_t arg3 ;
  std::int32_t arg4 ;
  std::int32_t arg5 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  imebra::MutableOverlay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (imebra::overlayType_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::int32_t)jarg4; 
  arg5 = (std::int32_t)jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return 0;
  std::string arg7_str(arg7_pstr);
  arg7 = &arg7_str;
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  {
    try {
      result = (imebra::MutableOverlay *)new imebra::MutableOverlay(arg1,(std::string const &)*arg2,arg3,arg4,arg5,(std::string const &)*arg6,(std::string const &)*arg7);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableOverlay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MutableOverlay_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::MutableOverlay *arg1 = 0 ;
  imebra::MutableOverlay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableOverlay **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::MutableOverlay const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::MutableOverlay *)new imebra::MutableOverlay((imebra::MutableOverlay const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableOverlay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1MutableOverlay(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::MutableOverlay *arg1 = (imebra::MutableOverlay *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::MutableOverlay **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableOverlay_1setROIArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imebra::MutableOverlay *arg1 = (imebra::MutableOverlay *) 0 ;
  std::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableOverlay **)&jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  {
    try {
      (arg1)->setROIArea(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableOverlay_1setROIMean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  imebra::MutableOverlay *arg1 = (imebra::MutableOverlay *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableOverlay **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setROIMean(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableOverlay_1setROIStandardDeviation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  imebra::MutableOverlay *arg1 = (imebra::MutableOverlay *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableOverlay **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setROIStandardDeviation(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableOverlay_1setImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  imebra::MutableOverlay *arg1 = (imebra::MutableOverlay *) 0 ;
  std::uint32_t arg2 ;
  imebra::Image *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(imebra::MutableOverlay **)&jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  arg3 = *(imebra::Image **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Image const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setImage(arg2,(imebra::Image const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1Tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Tag *arg1 = 0 ;
  imebra::Tag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Tag const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::Tag *)new imebra::Tag((imebra::Tag const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Tag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1Tag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::Tag **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Tag_1getBuffersCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  {
    try {
      result = ((imebra::Tag const *)arg1)->getBuffersCount();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_Tag_1bufferExists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (bool)((imebra::Tag const *)arg1)->bufferExists(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Tag_1getBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((imebra::Tag const *)arg1)->getBufferSize(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Tag_1getReadingDataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::ReadingDataHandler > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((imebra::Tag const *)arg1)->getReadingDataHandler(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadingDataHandler **)&jresult = new imebra::ReadingDataHandler((const imebra::ReadingDataHandler &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Tag_1getReadingDataHandlerNumeric(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::ReadingDataHandlerNumeric > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((imebra::Tag const *)arg1)->getReadingDataHandlerNumeric(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadingDataHandlerNumeric **)&jresult = new imebra::ReadingDataHandlerNumeric((const imebra::ReadingDataHandlerNumeric &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Tag_1getReadingDataHandlerRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::ReadingDataHandlerNumeric > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((imebra::Tag const *)arg1)->getReadingDataHandlerRaw(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadingDataHandlerNumeric **)&jresult = new imebra::ReadingDataHandlerNumeric((const imebra::ReadingDataHandlerNumeric &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Tag_1getStreamReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::StreamReader > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((imebra::Tag const *)arg1)->getStreamReader(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamReader **)&jresult = new imebra::StreamReader((const imebra::StreamReader &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Tag_1getSequenceItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((imebra::Tag const *)arg1)->getSequenceItem(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = new imebra::DataSet((const imebra::DataSet &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_Tag_1sequenceItemExists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (bool)((imebra::Tag const *)arg1)->sequenceItemExists(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_Tag_1getDataType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::Tag *arg1 = (imebra::Tag *) 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Tag **)&jarg1; 
  {
    try {
      result = (imebra::tagVR_t)((imebra::Tag const *)arg1)->getDataType();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MutableTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::MutableTag *arg1 = 0 ;
  imebra::MutableTag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableTag **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::MutableTag const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::MutableTag *)new imebra::MutableTag((imebra::MutableTag const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableTag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1MutableTag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::MutableTag *arg1 = (imebra::MutableTag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::MutableTag **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableTag_1getWritingDataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::MutableTag *arg1 = (imebra::MutableTag *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::WritingDataHandler > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableTag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (arg1)->getWritingDataHandler(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandler **)&jresult = new imebra::WritingDataHandler((const imebra::WritingDataHandler &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableTag_1getWritingDataHandlerNumeric(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::MutableTag *arg1 = (imebra::MutableTag *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::WritingDataHandlerNumeric > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableTag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (arg1)->getWritingDataHandlerNumeric(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandlerNumeric **)&jresult = new imebra::WritingDataHandlerNumeric((const imebra::WritingDataHandlerNumeric &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableTag_1getWritingDataHandlerRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::MutableTag *arg1 = (imebra::MutableTag *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::WritingDataHandlerNumeric > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableTag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (arg1)->getWritingDataHandlerRaw(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandlerNumeric **)&jresult = new imebra::WritingDataHandlerNumeric((const imebra::WritingDataHandlerNumeric &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableTag_1getStreamWriter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::MutableTag *arg1 = (imebra::MutableTag *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::StreamWriter > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableTag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (arg1)->getStreamWriter(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamWriter **)&jresult = new imebra::StreamWriter((const imebra::StreamWriter &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableTag_1appendSequenceItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::MutableTag *arg1 = (imebra::MutableTag *) 0 ;
  SwigValueWrapper< imebra::MutableDataSet > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableTag **)&jarg1; 
  {
    try {
      result = (arg1)->appendSequenceItem();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableDataSet **)&jresult = new imebra::MutableDataSet((const imebra::MutableDataSet &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableTag_1setStream(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  imebra::MutableTag *arg1 = (imebra::MutableTag *) 0 ;
  size_t arg2 ;
  imebra::FileStreamInput *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(imebra::MutableTag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(imebra::FileStreamInput **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::FileStreamInput & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setStream(arg2,*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DataSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = 0 ;
  imebra::DataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DataSet **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::DataSet *)new imebra::DataSet((imebra::DataSet const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1DataSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::DataSet **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::tagsIds_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getTags();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::tagsIds_t **)&jresult = new imebra::tagsIds_t((const imebra::tagsIds_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  SwigValueWrapper< imebra::Tag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getTag((imebra::TagId const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Tag **)&jresult = new imebra::Tag((const imebra::Tag &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::Image > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getImage(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Image **)&jresult = new imebra::Image((const imebra::Image &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getOverlay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::Overlay > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getOverlay(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Overlay **)&jresult = new imebra::Overlay((const imebra::Overlay &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getImageApplyModalityTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::Image > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getImageApplyModalityTransform(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Image **)&jresult = new imebra::Image((const imebra::Image &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getVOIs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::vois_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getVOIs();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::vois_t **)&jresult = new imebra::vois_t((const imebra::vois_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getFunctionalGroupDataSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getFunctionalGroupDataSet(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = new imebra::DataSet((const imebra::DataSet &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getStreamReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  SwigValueWrapper< imebra::StreamReader > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getStreamReader((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamReader **)&jresult = new imebra::StreamReader((const imebra::StreamReader &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getSequenceItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getSequenceItem((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = new imebra::DataSet((const imebra::DataSet &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getLUT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  SwigValueWrapper< imebra::LUT > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getLUT((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::LUT **)&jresult = new imebra::LUT((const imebra::LUT &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getReadingDataHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  SwigValueWrapper< imebra::ReadingDataHandler > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getReadingDataHandler((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadingDataHandler **)&jresult = new imebra::ReadingDataHandler((const imebra::ReadingDataHandler &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getReadingDataHandlerNumeric(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  SwigValueWrapper< imebra::ReadingDataHandlerNumeric > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getReadingDataHandlerNumeric((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadingDataHandlerNumeric **)&jresult = new imebra::ReadingDataHandlerNumeric((const imebra::ReadingDataHandlerNumeric &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getReadingDataHandlerRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  SwigValueWrapper< imebra::ReadingDataHandlerNumeric > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getReadingDataHandlerRaw((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ReadingDataHandlerNumeric **)&jresult = new imebra::ReadingDataHandlerNumeric((const imebra::ReadingDataHandlerNumeric &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_DataSet_1bufferExists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (bool)((imebra::DataSet const *)arg1)->bufferExists((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DataSet_1getInt32_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (std::int32_t)((imebra::DataSet const *)arg1)->getInt32((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DataSet_1getSignedLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (std::int32_t)((imebra::DataSet const *)arg1)->getSignedLong((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DataSet_1getInt32_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  jint jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::int32_t arg4 ;
  std::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (std::int32_t)jarg4; 
  {
    try {
      result = (std::int32_t)((imebra::DataSet const *)arg1)->getInt32((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DataSet_1getSignedLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  jint jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::int32_t arg4 ;
  std::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (std::int32_t)jarg4; 
  {
    try {
      result = (std::int32_t)((imebra::DataSet const *)arg1)->getSignedLong((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getUint32_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (std::uint32_t)((imebra::DataSet const *)arg1)->getUint32((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getUnsignedLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (std::uint32_t)((imebra::DataSet const *)arg1)->getUnsignedLong((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getUint32_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  {
    try {
      result = (std::uint32_t)((imebra::DataSet const *)arg1)->getUint32((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getUnsignedLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  {
    try {
      result = (std::uint32_t)((imebra::DataSet const *)arg1)->getUnsignedLong((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_imebra_imebraJNI_DataSet_1getInt16_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jshort jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (std::int16_t)((imebra::DataSet const *)arg1)->getInt16((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_imebra_imebraJNI_DataSet_1getInt16_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jshort jarg4) {
  jshort jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::int16_t arg4 ;
  std::int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (std::int16_t)jarg4; 
  {
    try {
      result = (std::int16_t)((imebra::DataSet const *)arg1)->getInt16((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DataSet_1getUint16_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (std::uint16_t)((imebra::DataSet const *)arg1)->getUint16((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DataSet_1getUint16_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  jint jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::uint16_t arg4 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (std::uint16_t)jarg4; 
  {
    try {
      result = (std::uint16_t)((imebra::DataSet const *)arg1)->getUint16((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_com_imebra_imebraJNI_DataSet_1getInt8_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jbyte jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::int8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (std::int8_t)((imebra::DataSet const *)arg1)->getInt8((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_com_imebra_imebraJNI_DataSet_1getInt8_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jbyte jarg4) {
  jbyte jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::int8_t arg4 ;
  std::int8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (std::int8_t)jarg4; 
  {
    try {
      result = (std::int8_t)((imebra::DataSet const *)arg1)->getInt8((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_imebra_imebraJNI_DataSet_1getUint8_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jshort jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (std::uint8_t)((imebra::DataSet const *)arg1)->getUint8((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_imebra_imebraJNI_DataSet_1getUint8_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jshort jarg4) {
  jshort jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::uint8_t arg4 ;
  std::uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (std::uint8_t)jarg4; 
  {
    try {
      result = (std::uint8_t)((imebra::DataSet const *)arg1)->getUint8((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_imebraJNI_DataSet_1getDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jdouble jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (double)((imebra::DataSet const *)arg1)->getDouble((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_imebra_imebraJNI_DataSet_1getFloat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jfloat jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (float)((imebra::DataSet const *)arg1)->getFloat((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_imebraJNI_DataSet_1getDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)((imebra::DataSet const *)arg1)->getDouble((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_imebra_imebraJNI_DataSet_1getFloat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jfloat jarg4) {
  jfloat jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  float arg4 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (float)jarg4; 
  {
    try {
      result = (float)((imebra::DataSet const *)arg1)->getFloat((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_DataSet_1getString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jstring jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getString((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_DataSet_1getString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jstring jarg4) {
  jstring jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getString((imebra::TagId const &)*arg2,arg3,(std::string const &)*arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getAge_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  SwigValueWrapper< imebra::Age > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getAge((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Age **)&jresult = new imebra::Age((const imebra::Age &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getAge_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::Age *arg4 = 0 ;
  SwigValueWrapper< imebra::Age > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = *(imebra::Age **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Age const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getAge((imebra::TagId const &)*arg2,arg3,(imebra::Age const &)*arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Age **)&jresult = new imebra::Age((const imebra::Age &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getDate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  SwigValueWrapper< imebra::Date > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getDate((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Date **)&jresult = new imebra::Date((const imebra::Date &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getDate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::Date *arg4 = 0 ;
  SwigValueWrapper< imebra::Date > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = *(imebra::Date **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Date const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getDate((imebra::TagId const &)*arg2,arg3,(imebra::Date const &)*arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Date **)&jresult = new imebra::Date((const imebra::Date &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getPatientName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  SwigValueWrapper< imebra::PatientName > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getPatientName((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::PatientName **)&jresult = new imebra::PatientName((const imebra::PatientName &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DataSet_1getPatientName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::PatientName *arg4 = 0 ;
  SwigValueWrapper< imebra::PatientName > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = *(imebra::PatientName **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::PatientName const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((imebra::DataSet const *)arg1)->getPatientName((imebra::TagId const &)*arg2,arg3,(imebra::PatientName const &)*arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::PatientName **)&jresult = new imebra::PatientName((const imebra::PatientName &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DataSet_1getDataType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  imebra::DataSet *arg1 = (imebra::DataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::tagVR_t)((imebra::DataSet const *)arg1)->getDataType((imebra::TagId const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MutableDataSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::MutableDataSet *arg1 = 0 ;
  imebra::MutableDataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableDataSet **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::MutableDataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::MutableDataSet *)new imebra::MutableDataSet((imebra::MutableDataSet const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableDataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MutableDataSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::MutableDataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::MutableDataSet *)new imebra::MutableDataSet();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableDataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MutableDataSet_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  imebra::MutableDataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (imebra::MutableDataSet *)new imebra::MutableDataSet((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableDataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MutableDataSet_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  imebra::charsetsList_t *arg2 = 0 ;
  imebra::MutableDataSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(imebra::charsetsList_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::charsetsList_t const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::MutableDataSet *)new imebra::MutableDataSet((std::string const &)*arg1,(imebra::charsetsList_t const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableDataSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1MutableDataSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1getTagCreate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  imebra::tagVR_t arg3 ;
  SwigValueWrapper< imebra::MutableTag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (imebra::tagVR_t)jarg3; 
  {
    try {
      result = (arg1)->getTagCreate((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableTag **)&jresult = new imebra::MutableTag((const imebra::MutableTag &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1getTagCreate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  SwigValueWrapper< imebra::MutableTag > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getTagCreate((imebra::TagId const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableTag **)&jresult = new imebra::MutableTag((const imebra::MutableTag &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  size_t arg2 ;
  imebra::Image *arg3 = 0 ;
  imebra::imageQuality_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(imebra::Image **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Image const & reference is null");
    return ;
  } 
  arg4 = (imebra::imageQuality_t)jarg4; 
  {
    try {
      (arg1)->setImage(arg2,(imebra::Image const &)*arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setOverlay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  size_t arg2 ;
  imebra::Overlay *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(imebra::Overlay **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Overlay const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setOverlay(arg2,(imebra::Overlay const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1getStreamWriter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::tagVR_t arg4 ;
  SwigValueWrapper< imebra::StreamWriter > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      result = (arg1)->getStreamWriter((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamWriter **)&jresult = new imebra::StreamWriter((const imebra::StreamWriter &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1getStreamWriter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  SwigValueWrapper< imebra::StreamWriter > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (arg1)->getStreamWriter((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::StreamWriter **)&jresult = new imebra::StreamWriter((const imebra::StreamWriter &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1appendSequenceItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  SwigValueWrapper< imebra::MutableDataSet > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->appendSequenceItem((imebra::TagId const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableDataSet **)&jresult = new imebra::MutableDataSet((const imebra::MutableDataSet &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1getWritingDataHandler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::tagVR_t arg4 ;
  SwigValueWrapper< imebra::WritingDataHandler > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      result = (arg1)->getWritingDataHandler((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandler **)&jresult = new imebra::WritingDataHandler((const imebra::WritingDataHandler &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1getWritingDataHandler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  SwigValueWrapper< imebra::WritingDataHandler > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (arg1)->getWritingDataHandler((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandler **)&jresult = new imebra::WritingDataHandler((const imebra::WritingDataHandler &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1getWritingDataHandlerNumeric_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::tagVR_t arg4 ;
  SwigValueWrapper< imebra::WritingDataHandlerNumeric > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      result = (arg1)->getWritingDataHandlerNumeric((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandlerNumeric **)&jresult = new imebra::WritingDataHandlerNumeric((const imebra::WritingDataHandlerNumeric &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1getWritingDataHandlerNumeric_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  SwigValueWrapper< imebra::WritingDataHandlerNumeric > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (arg1)->getWritingDataHandlerNumeric((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandlerNumeric **)&jresult = new imebra::WritingDataHandlerNumeric((const imebra::WritingDataHandlerNumeric &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1getWritingDataHandlerRaw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  imebra::tagVR_t arg4 ;
  SwigValueWrapper< imebra::WritingDataHandlerNumeric > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      result = (arg1)->getWritingDataHandlerRaw((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandlerNumeric **)&jresult = new imebra::WritingDataHandlerNumeric((const imebra::WritingDataHandlerNumeric &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1getWritingDataHandlerRaw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  size_t arg3 ;
  SwigValueWrapper< imebra::WritingDataHandlerNumeric > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (arg1)->getWritingDataHandlerRaw((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::WritingDataHandlerNumeric **)&jresult = new imebra::WritingDataHandlerNumeric((const imebra::WritingDataHandlerNumeric &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setInt32_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::int32_t arg3 ;
  imebra::tagVR_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (std::int32_t)jarg3; 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      (arg1)->setInt32((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setSignedLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::int32_t arg3 ;
  imebra::tagVR_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (std::int32_t)jarg3; 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      (arg1)->setSignedLong((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setInt32_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::int32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (std::int32_t)jarg3; 
  {
    try {
      (arg1)->setInt32((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setSignedLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::int32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (std::int32_t)jarg3; 
  {
    try {
      (arg1)->setSignedLong((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setUint32_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::uint32_t arg3 ;
  imebra::tagVR_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      (arg1)->setUint32((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setUnsignedLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jint jarg4) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::uint32_t arg3 ;
  imebra::tagVR_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      (arg1)->setUnsignedLong((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setUint32_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::uint32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (std::uint32_t)jarg3; 
  {
    try {
      (arg1)->setUint32((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setUnsignedLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::uint32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (std::uint32_t)jarg3; 
  {
    try {
      (arg1)->setUnsignedLong((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setInt16_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jint jarg4) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::int16_t arg3 ;
  imebra::tagVR_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (std::int16_t)jarg3; 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      (arg1)->setInt16((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setInt16_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::int16_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (std::int16_t)jarg3; 
  {
    try {
      (arg1)->setInt16((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setUint16_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::uint16_t arg3 ;
  imebra::tagVR_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (std::uint16_t)jarg3; 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      (arg1)->setUint16((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setUint16_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::uint16_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (std::uint16_t)jarg3; 
  {
    try {
      (arg1)->setUint16((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setInt8_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyte jarg3, jint jarg4) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::int8_t arg3 ;
  imebra::tagVR_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (std::int8_t)jarg3; 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      (arg1)->setInt8((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setInt8_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jbyte jarg3) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::int8_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (std::int8_t)jarg3; 
  {
    try {
      (arg1)->setInt8((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setUint8_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jint jarg4) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::uint8_t arg3 ;
  imebra::tagVR_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (std::uint8_t)jarg3; 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      (arg1)->setUint8((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setUint8_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::uint8_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (std::uint8_t)jarg3; 
  {
    try {
      (arg1)->setUint8((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jint jarg4) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  double arg3 ;
  imebra::tagVR_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      (arg1)->setDouble((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setDouble((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setFloat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jint jarg4) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  float arg3 ;
  imebra::tagVR_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      (arg1)->setFloat((imebra::TagId const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setFloat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = (float)jarg3; 
  {
    try {
      (arg1)->setFloat((imebra::TagId const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::string *arg3 = 0 ;
  imebra::tagVR_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      (arg1)->setString((imebra::TagId const &)*arg2,(std::string const &)*arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->setString((imebra::TagId const &)*arg2,(std::string const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setAge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  imebra::Age *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = *(imebra::Age **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Age const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setAge((imebra::TagId const &)*arg2,(imebra::Age const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setDate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  imebra::Date *arg3 = 0 ;
  imebra::tagVR_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = *(imebra::Date **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Date const & reference is null");
    return ;
  } 
  arg4 = (imebra::tagVR_t)jarg4; 
  {
    try {
      (arg1)->setDate((imebra::TagId const &)*arg2,(imebra::Date const &)*arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setDate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  imebra::Date *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = *(imebra::Date **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Date const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setDate((imebra::TagId const &)*arg2,(imebra::Date const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1setPatientName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  imebra::MutableDataSet *arg1 = (imebra::MutableDataSet *) 0 ;
  imebra::TagId *arg2 = 0 ;
  imebra::PatientName *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(imebra::MutableDataSet **)&jarg1; 
  arg2 = *(imebra::TagId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return ;
  } 
  arg3 = *(imebra::PatientName **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::PatientName const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setPatientName((imebra::TagId const &)*arg2,(imebra::PatientName const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CodecFactory_1load_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::StreamReader *arg1 = 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::StreamReader **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::StreamReader & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = imebra::CodecFactory::load(*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = new imebra::DataSet((const imebra::DataSet &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CodecFactory_1load_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::StreamReader *arg1 = 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::StreamReader **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::StreamReader & reference is null");
    return 0;
  } 
  {
    try {
      result = imebra::CodecFactory::load(*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = new imebra::DataSet((const imebra::DataSet &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CodecFactory_1load_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  size_t arg2 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = imebra::CodecFactory::load((std::string const &)*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = new imebra::DataSet((const imebra::DataSet &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CodecFactory_1load_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = imebra::CodecFactory::load((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = new imebra::DataSet((const imebra::DataSet &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_CodecFactory_1saveImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4, jlong jarg5, jboolean jarg6, jboolean jarg7, jboolean jarg8, jboolean jarg9) {
  imebra::StreamWriter *arg1 = 0 ;
  imebra::Image *arg2 = 0 ;
  std::string *arg3 = 0 ;
  imebra::imageQuality_t arg4 ;
  std::uint32_t arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  bool arg9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::StreamWriter **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::StreamWriter & reference is null");
    return ;
  } 
  arg2 = *(imebra::Image **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Image const & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (imebra::imageQuality_t)jarg4; 
  arg5 = (std::uint32_t)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  {
    try {
      imebra::CodecFactory::saveImage(*arg1,(imebra::Image const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_CodecFactory_1save_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  imebra::DataSet *arg1 = 0 ;
  imebra::StreamWriter *arg2 = 0 ;
  imebra::codecType_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DataSet **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return ;
  } 
  arg2 = *(imebra::StreamWriter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::StreamWriter & reference is null");
    return ;
  } 
  arg3 = (imebra::codecType_t)jarg3; 
  {
    try {
      imebra::CodecFactory::save((imebra::DataSet const &)*arg1,*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_CodecFactory_1save_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  imebra::DataSet *arg1 = 0 ;
  std::string *arg2 = 0 ;
  imebra::codecType_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DataSet **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (imebra::codecType_t)jarg3; 
  {
    try {
      imebra::CodecFactory::save((imebra::DataSet const &)*arg1,(std::string const &)*arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_CodecFactory_1setMaximumImageSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  std::uint32_t arg1 ;
  std::uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::uint32_t)jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  {
    try {
      imebra::CodecFactory::setMaximumImageSize(arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CodecFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::CodecFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::CodecFactory *)new imebra::CodecFactory();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CodecFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CodecFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CodecFactory *arg1 = (imebra::CodecFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CodecFactory **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TCPAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TCPAddress *arg1 = 0 ;
  imebra::TCPAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPAddress **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TCPAddress const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::TCPAddress *)new imebra::TCPAddress((imebra::TCPAddress const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TCPAddress **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1TCPAddress(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::TCPAddress *arg1 = (imebra::TCPAddress *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::TCPAddress **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_TCPAddress_1getNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::TCPAddress *arg1 = (imebra::TCPAddress *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPAddress **)&jarg1; 
  {
    try {
      result = ((imebra::TCPAddress const *)arg1)->getNode();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_TCPAddress_1getService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::TCPAddress *arg1 = (imebra::TCPAddress *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPAddress **)&jarg1; 
  {
    try {
      result = ((imebra::TCPAddress const *)arg1)->getService();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TCPActiveAddress_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  imebra::TCPActiveAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (imebra::TCPActiveAddress *)new imebra::TCPActiveAddress((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TCPActiveAddress **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TCPActiveAddress_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TCPActiveAddress *arg1 = 0 ;
  imebra::TCPActiveAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPActiveAddress **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TCPActiveAddress const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::TCPActiveAddress *)new imebra::TCPActiveAddress((imebra::TCPActiveAddress const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TCPActiveAddress **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1TCPActiveAddress(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::TCPActiveAddress *arg1 = (imebra::TCPActiveAddress *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::TCPActiveAddress **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TCPPassiveAddress_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  imebra::TCPPassiveAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (imebra::TCPPassiveAddress *)new imebra::TCPPassiveAddress((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TCPPassiveAddress **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TCPPassiveAddress_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TCPPassiveAddress *arg1 = 0 ;
  imebra::TCPPassiveAddress *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPPassiveAddress **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TCPPassiveAddress const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::TCPPassiveAddress *)new imebra::TCPPassiveAddress((imebra::TCPPassiveAddress const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TCPPassiveAddress **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1TCPPassiveAddress(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::TCPPassiveAddress *arg1 = (imebra::TCPPassiveAddress *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::TCPPassiveAddress **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TCPListener_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TCPPassiveAddress *arg1 = 0 ;
  imebra::TCPListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPPassiveAddress **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TCPPassiveAddress const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::TCPListener *)new imebra::TCPListener((imebra::TCPPassiveAddress const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TCPListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TCPListener_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TCPListener *arg1 = 0 ;
  imebra::TCPListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPListener **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TCPListener const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::TCPListener *)new imebra::TCPListener((imebra::TCPListener const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TCPListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1TCPListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::TCPListener *arg1 = (imebra::TCPListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::TCPListener **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TCPListener_1waitForConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TCPListener *arg1 = (imebra::TCPListener *) 0 ;
  SwigValueWrapper< imebra::TCPStream > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPListener **)&jarg1; 
  {
    try {
      result = (arg1)->waitForConnection();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TCPStream **)&jresult = new imebra::TCPStream((const imebra::TCPStream &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_TCPListener_1terminate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  imebra::TCPListener *arg1 = (imebra::TCPListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPListener **)&jarg1; 
  {
    try {
      (arg1)->terminate();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TCPStream_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TCPActiveAddress *arg1 = 0 ;
  imebra::TCPStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPActiveAddress **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TCPActiveAddress const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::TCPStream *)new imebra::TCPStream((imebra::TCPActiveAddress const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TCPStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TCPStream_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TCPStream *arg1 = 0 ;
  imebra::TCPStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPStream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TCPStream const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::TCPStream *)new imebra::TCPStream((imebra::TCPStream const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TCPStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1TCPStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::TCPStream *arg1 = (imebra::TCPStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::TCPStream **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TCPStream_1getPeerAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TCPStream *arg1 = (imebra::TCPStream *) 0 ;
  SwigValueWrapper< imebra::TCPAddress > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPStream **)&jarg1; 
  {
    try {
      result = ((imebra::TCPStream const *)arg1)->getPeerAddress();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TCPAddress **)&jresult = new imebra::TCPAddress((const imebra::TCPAddress &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TCPStream_1getStreamInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TCPStream *arg1 = (imebra::TCPStream *) 0 ;
  SwigValueWrapper< imebra::BaseStreamInput > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPStream **)&jarg1; 
  {
    try {
      result = (arg1)->getStreamInput();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::BaseStreamInput **)&jresult = new imebra::BaseStreamInput((const imebra::BaseStreamInput &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TCPStream_1getStreamOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TCPStream *arg1 = (imebra::TCPStream *) 0 ;
  SwigValueWrapper< imebra::BaseStreamOutput > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TCPStream **)&jarg1; 
  {
    try {
      result = (arg1)->getStreamOutput();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::BaseStreamOutput **)&jresult = new imebra::BaseStreamOutput((const imebra::BaseStreamOutput &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1PipeStream_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  imebra::PipeStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (imebra::PipeStream *)new imebra::PipeStream(arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::PipeStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1PipeStream_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::PipeStream *arg1 = 0 ;
  imebra::PipeStream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::PipeStream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::PipeStream const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::PipeStream *)new imebra::PipeStream((imebra::PipeStream const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::PipeStream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1PipeStream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::PipeStream *arg1 = (imebra::PipeStream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::PipeStream **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_PipeStream_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  imebra::PipeStream *arg1 = (imebra::PipeStream *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::PipeStream **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      (arg1)->close(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_PipeStream_1getStreamInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::PipeStream *arg1 = (imebra::PipeStream *) 0 ;
  SwigValueWrapper< imebra::BaseStreamInput > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::PipeStream **)&jarg1; 
  {
    try {
      result = (arg1)->getStreamInput();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::BaseStreamInput **)&jresult = new imebra::BaseStreamInput((const imebra::BaseStreamInput &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_PipeStream_1getStreamOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::PipeStream *arg1 = (imebra::PipeStream *) 0 ;
  SwigValueWrapper< imebra::BaseStreamOutput > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::PipeStream **)&jarg1; 
  {
    try {
      result = (arg1)->getStreamOutput();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::BaseStreamOutput **)&jresult = new imebra::BaseStreamOutput((const imebra::BaseStreamOutput &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1Transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Transform *arg1 = 0 ;
  imebra::Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Transform **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Transform const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::Transform *)new imebra::Transform((imebra::Transform const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Transform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1Transform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::Transform *arg1 = (imebra::Transform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::Transform **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_Transform_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imebra::Transform *arg1 = (imebra::Transform *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Transform **)&jarg1; 
  {
    try {
      result = (bool)((imebra::Transform const *)arg1)->isEmpty();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Transform_1allocateOutputImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  imebra::Transform *arg1 = (imebra::Transform *) 0 ;
  imebra::Image *arg2 = 0 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  SwigValueWrapper< imebra::MutableImage > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::Transform **)&jarg1; 
  arg2 = *(imebra::Image **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Image const & reference is null");
    return 0;
  } 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  {
    try {
      result = ((imebra::Transform const *)arg1)->allocateOutputImage((imebra::Image const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableImage **)&jresult = new imebra::MutableImage((const imebra::MutableImage &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_Transform_1runTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jlong jarg9) {
  imebra::Transform *arg1 = (imebra::Transform *) 0 ;
  imebra::Image *arg2 = 0 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  std::uint32_t arg6 ;
  imebra::MutableImage *arg7 = 0 ;
  std::uint32_t arg8 ;
  std::uint32_t arg9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg7_;
  arg1 = *(imebra::Transform **)&jarg1; 
  arg2 = *(imebra::Image **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Image const & reference is null");
    return ;
  } 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  arg5 = (std::uint32_t)jarg5; 
  arg6 = (std::uint32_t)jarg6; 
  arg7 = *(imebra::MutableImage **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::MutableImage & reference is null");
    return ;
  } 
  arg8 = (std::uint32_t)jarg8; 
  arg9 = (std::uint32_t)jarg9; 
  {
    try {
      ((imebra::Transform const *)arg1)->runTransform((imebra::Image const &)*arg2,arg3,arg4,arg5,arg6,*arg7,arg8,arg9);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TransformHighBit_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::TransformHighBit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::TransformHighBit *)new imebra::TransformHighBit();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TransformHighBit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TransformHighBit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TransformHighBit *arg1 = 0 ;
  imebra::TransformHighBit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TransformHighBit **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TransformHighBit const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::TransformHighBit *)new imebra::TransformHighBit((imebra::TransformHighBit const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TransformHighBit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1TransformHighBit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::TransformHighBit *arg1 = (imebra::TransformHighBit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::TransformHighBit **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TransformsChain_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::TransformsChain *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::TransformsChain *)new imebra::TransformsChain();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TransformsChain **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1TransformsChain_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TransformsChain *arg1 = 0 ;
  imebra::TransformsChain *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TransformsChain **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TransformsChain const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::TransformsChain *)new imebra::TransformsChain((imebra::TransformsChain const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::TransformsChain **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1TransformsChain(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::TransformsChain *arg1 = (imebra::TransformsChain *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::TransformsChain **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_TransformsChain_1addTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::TransformsChain *arg1 = (imebra::TransformsChain *) 0 ;
  imebra::Transform *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::TransformsChain **)&jarg1; 
  arg2 = *(imebra::Transform **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Transform const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->addTransform((imebra::Transform const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1ModalityVOILUT_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = 0 ;
  imebra::ModalityVOILUT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DataSet **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::ModalityVOILUT *)new imebra::ModalityVOILUT((imebra::DataSet const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ModalityVOILUT **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1ModalityVOILUT_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::ModalityVOILUT *arg1 = 0 ;
  imebra::ModalityVOILUT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::ModalityVOILUT **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::ModalityVOILUT const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::ModalityVOILUT *)new imebra::ModalityVOILUT((imebra::ModalityVOILUT const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ModalityVOILUT **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1ModalityVOILUT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::ModalityVOILUT *arg1 = (imebra::ModalityVOILUT *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::ModalityVOILUT **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1VOILUT_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::VOILUT *arg1 = 0 ;
  imebra::VOILUT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::VOILUT **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::VOILUT const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::VOILUT *)new imebra::VOILUT((imebra::VOILUT const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::VOILUT **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1VOILUT_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::LUT *arg1 = 0 ;
  imebra::VOILUT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::LUT **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::LUT const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::VOILUT *)new imebra::VOILUT((imebra::LUT const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::VOILUT **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1VOILUT_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::VOIDescription *arg1 = 0 ;
  imebra::VOILUT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::VOIDescription **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::VOIDescription const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::VOILUT *)new imebra::VOILUT((imebra::VOIDescription const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::VOILUT **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1VOILUT(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::VOILUT *arg1 = (imebra::VOILUT *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::VOILUT **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_VOILUT_1getOptimalVOI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  imebra::Image *arg1 = 0 ;
  std::uint32_t arg2 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  imebra::VOIDescription result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Image **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Image const & reference is null");
    return 0;
  } 
  arg2 = (std::uint32_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  arg5 = (std::uint32_t)jarg5; 
  {
    try {
      result = imebra::VOILUT::getOptimalVOI((imebra::Image const &)*arg1,arg2,arg3,arg4,arg5);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::VOIDescription **)&jresult = new imebra::VOIDescription((const imebra::VOIDescription &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1VOIDescription_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::VOIDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::VOIDescription *)new imebra::VOIDescription();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::VOIDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1VOIDescription_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::VOIDescription *arg1 = 0 ;
  imebra::VOIDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::VOIDescription **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::VOIDescription const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::VOIDescription *)new imebra::VOIDescription((imebra::VOIDescription const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::VOIDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_VOIDescription_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::VOIDescription *arg1 = (imebra::VOIDescription *) 0 ;
  imebra::VOIDescription *arg2 = 0 ;
  imebra::VOIDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::VOIDescription **)&jarg1; 
  arg2 = *(imebra::VOIDescription **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::VOIDescription const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::VOIDescription *) &(arg1)->operator =((imebra::VOIDescription const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::VOIDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1VOIDescription(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::VOIDescription *arg1 = (imebra::VOIDescription *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::VOIDescription **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1VOIDescription_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jint jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  imebra::dicomVOIFunction_t arg3 ;
  std::string *arg4 = 0 ;
  imebra::VOIDescription *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (imebra::dicomVOIFunction_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (imebra::VOIDescription *)new imebra::VOIDescription(arg1,arg2,arg3,(std::string const &)*arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::VOIDescription **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_imebraJNI_VOIDescription_1getCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  imebra::VOIDescription *arg1 = (imebra::VOIDescription *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::VOIDescription **)&jarg1; 
  {
    try {
      result = (double)((imebra::VOIDescription const *)arg1)->getCenter();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_imebraJNI_VOIDescription_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  imebra::VOIDescription *arg1 = (imebra::VOIDescription *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::VOIDescription **)&jarg1; 
  {
    try {
      result = (double)((imebra::VOIDescription const *)arg1)->getWidth();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_VOIDescription_1getFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::VOIDescription *arg1 = (imebra::VOIDescription *) 0 ;
  imebra::dicomVOIFunction_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::VOIDescription **)&jarg1; 
  {
    try {
      result = (imebra::dicomVOIFunction_t)((imebra::VOIDescription const *)arg1)->getFunction();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_VOIDescription_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::VOIDescription *arg1 = (imebra::VOIDescription *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::VOIDescription **)&jarg1; 
  {
    try {
      result = ((imebra::VOIDescription const *)arg1)->getDescription();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_ColorTransformsFactory_1normalizeColorSpace(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = imebra::ColorTransformsFactory::normalizeColorSpace((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_ColorTransformsFactory_1isMonochrome(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (bool)imebra::ColorTransformsFactory::isMonochrome((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_ColorTransformsFactory_1isSubsampledX(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (bool)imebra::ColorTransformsFactory::isSubsampledX((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_ColorTransformsFactory_1isSubsampledY(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (bool)imebra::ColorTransformsFactory::isSubsampledY((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_ColorTransformsFactory_1canSubsample(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (bool)imebra::ColorTransformsFactory::canSubsample((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_ColorTransformsFactory_1makeSubsampled(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jboolean jarg3) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = imebra::ColorTransformsFactory::makeSubsampled((std::string const &)*arg1,arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ColorTransformsFactory_1getNumberOfChannels(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (std::uint32_t)imebra::ColorTransformsFactory::getNumberOfChannels((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ColorTransformsFactory_1getTransform(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< imebra::Transform > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = imebra::ColorTransformsFactory::getTransform((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Transform **)&jresult = new imebra::Transform((const imebra::Transform &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1ColorTransformsFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::ColorTransformsFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::ColorTransformsFactory *)new imebra::ColorTransformsFactory();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::ColorTransformsFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1ColorTransformsFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::ColorTransformsFactory *arg1 = (imebra::ColorTransformsFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::ColorTransformsFactory **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DicomDirEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DicomDirEntry *arg1 = 0 ;
  imebra::DicomDirEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DicomDirEntry **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DicomDirEntry const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::DicomDirEntry *)new imebra::DicomDirEntry((imebra::DicomDirEntry const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DicomDirEntry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1DicomDirEntry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::DicomDirEntry **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DicomDirEntry_1getEntryDataSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DicomDirEntry **)&jarg1; 
  {
    try {
      result = ((imebra::DicomDirEntry const *)arg1)->getEntryDataSet();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = new imebra::DataSet((const imebra::DataSet &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_DicomDirEntry_1hasNextEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DicomDirEntry **)&jarg1; 
  {
    try {
      result = (bool)((imebra::DicomDirEntry const *)arg1)->hasNextEntry();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DicomDirEntry_1getNextEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  SwigValueWrapper< imebra::DicomDirEntry > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DicomDirEntry **)&jarg1; 
  {
    try {
      result = ((imebra::DicomDirEntry const *)arg1)->getNextEntry();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DicomDirEntry **)&jresult = new imebra::DicomDirEntry((const imebra::DicomDirEntry &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_DicomDirEntry_1hasChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DicomDirEntry **)&jarg1; 
  {
    try {
      result = (bool)((imebra::DicomDirEntry const *)arg1)->hasChildren();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DicomDirEntry_1getFirstChildEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  SwigValueWrapper< imebra::DicomDirEntry > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DicomDirEntry **)&jarg1; 
  {
    try {
      result = ((imebra::DicomDirEntry const *)arg1)->getFirstChildEntry();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DicomDirEntry **)&jresult = new imebra::DicomDirEntry((const imebra::DicomDirEntry &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DicomDirEntry_1getFileParts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  imebra::fileParts_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DicomDirEntry **)&jarg1; 
  {
    try {
      result = ((imebra::DicomDirEntry const *)arg1)->getFileParts();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::fileParts_t **)&jresult = new imebra::fileParts_t((const imebra::fileParts_t &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_DicomDirEntry_1getTypeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::DicomDirEntry *arg1 = (imebra::DicomDirEntry *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DicomDirEntry **)&jarg1; 
  {
    try {
      result = ((imebra::DicomDirEntry const *)arg1)->getTypeString();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MutableDicomDirEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::MutableDicomDirEntry *arg1 = 0 ;
  imebra::MutableDicomDirEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableDicomDirEntry **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::MutableDicomDirEntry const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::MutableDicomDirEntry *)new imebra::MutableDicomDirEntry((imebra::MutableDicomDirEntry const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableDicomDirEntry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1MutableDicomDirEntry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::MutableDicomDirEntry *arg1 = (imebra::MutableDicomDirEntry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::MutableDicomDirEntry **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableDicomDirEntry_1getEntryDataSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::MutableDicomDirEntry *arg1 = (imebra::MutableDicomDirEntry *) 0 ;
  SwigValueWrapper< imebra::MutableDataSet > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableDicomDirEntry **)&jarg1; 
  {
    try {
      result = (arg1)->getEntryDataSet();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableDataSet **)&jresult = new imebra::MutableDataSet((const imebra::MutableDataSet &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDicomDirEntry_1setNextEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::MutableDicomDirEntry *arg1 = (imebra::MutableDicomDirEntry *) 0 ;
  imebra::DicomDirEntry *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDicomDirEntry **)&jarg1; 
  arg2 = *(imebra::DicomDirEntry **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DicomDirEntry const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setNextEntry((imebra::DicomDirEntry const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDicomDirEntry_1setFirstChildEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::MutableDicomDirEntry *arg1 = (imebra::MutableDicomDirEntry *) 0 ;
  imebra::DicomDirEntry *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDicomDirEntry **)&jarg1; 
  arg2 = *(imebra::DicomDirEntry **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DicomDirEntry const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setFirstChildEntry((imebra::DicomDirEntry const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDicomDirEntry_1setFileParts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::MutableDicomDirEntry *arg1 = (imebra::MutableDicomDirEntry *) 0 ;
  imebra::fileParts_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDicomDirEntry **)&jarg1; 
  arg2 = *(imebra::fileParts_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::fileParts_t const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setFileParts((imebra::fileParts_t const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DicomDir_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DataSet *arg1 = 0 ;
  imebra::DicomDir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DataSet **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::DicomDir *)new imebra::DicomDir((imebra::DataSet const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DicomDir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DicomDir_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DicomDir *arg1 = 0 ;
  imebra::DicomDir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DicomDir **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DicomDir const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::DicomDir *)new imebra::DicomDir((imebra::DicomDir const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DicomDir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1DicomDir(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::DicomDir *arg1 = (imebra::DicomDir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::DicomDir **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_DicomDir_1hasRootEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imebra::DicomDir *arg1 = (imebra::DicomDir *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DicomDir **)&jarg1; 
  {
    try {
      result = (bool)((imebra::DicomDir const *)arg1)->hasRootEntry();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DicomDir_1getFirstRootEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DicomDir *arg1 = (imebra::DicomDir *) 0 ;
  SwigValueWrapper< imebra::DicomDirEntry > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DicomDir **)&jarg1; 
  {
    try {
      result = ((imebra::DicomDir const *)arg1)->getFirstRootEntry();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DicomDirEntry **)&jresult = new imebra::DicomDirEntry((const imebra::DicomDirEntry &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MutableDicomDir_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::MutableDicomDir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::MutableDicomDir *)new imebra::MutableDicomDir();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableDicomDir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MutableDicomDir_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::MutableDataSet *arg1 = 0 ;
  imebra::MutableDicomDir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableDataSet **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::MutableDataSet & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::MutableDicomDir *)new imebra::MutableDicomDir(*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableDicomDir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MutableDicomDir_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::MutableDicomDir *arg1 = 0 ;
  imebra::MutableDicomDir *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableDicomDir **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::MutableDicomDir const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::MutableDicomDir *)new imebra::MutableDicomDir((imebra::MutableDicomDir const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableDicomDir **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1MutableDicomDir(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::MutableDicomDir *arg1 = (imebra::MutableDicomDir *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::MutableDicomDir **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableDicomDir_1getNewEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  imebra::MutableDicomDir *arg1 = (imebra::MutableDicomDir *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< imebra::MutableDicomDirEntry > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableDicomDir **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->getNewEntry((std::string const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableDicomDirEntry **)&jresult = new imebra::MutableDicomDirEntry((const imebra::MutableDicomDirEntry &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableDicomDir_1setFirstRootEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::MutableDicomDir *arg1 = (imebra::MutableDicomDir *) 0 ;
  imebra::DicomDirEntry *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableDicomDir **)&jarg1; 
  arg2 = *(imebra::DicomDirEntry **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DicomDirEntry const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setFirstRootEntry((imebra::DicomDirEntry const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableDicomDir_1updateDataSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::MutableDicomDir *arg1 = (imebra::MutableDicomDir *) 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableDicomDir **)&jarg1; 
  {
    try {
      result = (arg1)->updateDataSet();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = new imebra::DataSet((const imebra::DataSet &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_DicomDictionary_1getTagDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::TagId *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TagId **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  {
    try {
      result = imebra::DicomDictionary::getTagDescription((imebra::TagId const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DicomDictionary_1getTagType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::TagId *arg1 = 0 ;
  imebra::tagVR_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TagId **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::tagVR_t)imebra::DicomDictionary::getTagType((imebra::TagId const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DicomDictionary_1getMultiplicityMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TagId *arg1 = 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TagId **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::uint32_t)imebra::DicomDictionary::getMultiplicityMin((imebra::TagId const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DicomDictionary_1getMultiplicityMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TagId *arg1 = 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TagId **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::uint32_t)imebra::DicomDictionary::getMultiplicityMax((imebra::TagId const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DicomDictionary_1getMultiplicityStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::TagId *arg1 = 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::TagId **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::TagId const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::uint32_t)imebra::DicomDictionary::getMultiplicityStep((imebra::TagId const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DicomDictionary_1getWordSize(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  imebra::tagVR_t arg1 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (imebra::tagVR_t)jarg1; 
  {
    try {
      result = (std::uint32_t)imebra::DicomDictionary::getWordSize(arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DicomDictionary_1getMaxSize(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  imebra::tagVR_t arg1 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (imebra::tagVR_t)jarg1; 
  {
    try {
      result = (std::uint32_t)imebra::DicomDictionary::getMaxSize(arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DicomDictionary(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::DicomDictionary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::DicomDictionary *)new imebra::DicomDictionary();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DicomDictionary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1DicomDictionary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::DicomDictionary *arg1 = (imebra::DicomDictionary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::DicomDictionary **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DrawBitmap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::DrawBitmap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::DrawBitmap *)new imebra::DrawBitmap();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DrawBitmap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DrawBitmap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Transform *arg1 = 0 ;
  imebra::DrawBitmap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Transform **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Transform const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::DrawBitmap *)new imebra::DrawBitmap((imebra::Transform const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DrawBitmap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DrawBitmap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DrawBitmap *arg1 = 0 ;
  imebra::DrawBitmap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DrawBitmap **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DrawBitmap const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::DrawBitmap *)new imebra::DrawBitmap((imebra::DrawBitmap const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DrawBitmap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1DrawBitmap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::DrawBitmap *arg1 = (imebra::DrawBitmap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::DrawBitmap **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DrawBitmap_1getBitmap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jbyteArray jarg5) {
  jlong jresult = 0 ;
  imebra::DrawBitmap *arg1 = (imebra::DrawBitmap *) 0 ;
  imebra::Image *arg2 = 0 ;
  imebra::drawBitmapType_t arg3 ;
  std::uint32_t arg4 ;
  char *arg5 = (char *) 0 ;
  size_t arg6 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DrawBitmap **)&jarg1; 
  arg2 = *(imebra::Image **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Image const & reference is null");
    return 0;
  } 
  arg3 = (imebra::drawBitmapType_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  {
    if (jarg5) {
      arg5 = (char *) jenv->GetByteArrayElements(jarg5, 0);
      arg6 = (size_t) jenv->GetArrayLength(jarg5);
    } else {
      arg5 = 0;
      arg6 = 0;
    }
  }
  {
    try {
      result = (arg1)->getBitmap((imebra::Image const &)*arg2,arg3,arg4,arg5,arg6);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  {
    if (jarg5) jenv->ReleaseByteArrayElements(jarg5, (jbyte *)arg5, 0);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DrawBitmap_1getBitmap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  imebra::DrawBitmap *arg1 = (imebra::DrawBitmap *) 0 ;
  imebra::Image *arg2 = 0 ;
  imebra::drawBitmapType_t arg3 ;
  std::uint32_t arg4 ;
  SwigValueWrapper< imebra::Memory > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DrawBitmap **)&jarg1; 
  arg2 = *(imebra::Image **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Image const & reference is null");
    return 0;
  } 
  arg3 = (imebra::drawBitmapType_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  {
    try {
      result = (arg1)->getBitmap((imebra::Image const &)*arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Memory **)&jresult = new imebra::Memory((const imebra::Memory &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1FileStreamInput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  imebra::FileStreamInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (imebra::FileStreamInput *)new imebra::FileStreamInput((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::FileStreamInput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1FileStreamInput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::FileStreamInput *arg1 = 0 ;
  imebra::FileStreamInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::FileStreamInput **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::FileStreamInput const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::FileStreamInput *)new imebra::FileStreamInput((imebra::FileStreamInput const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::FileStreamInput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1FileStreamInput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::FileStreamInput *arg1 = (imebra::FileStreamInput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::FileStreamInput **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1FileStreamOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  imebra::FileStreamOutput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (imebra::FileStreamOutput *)new imebra::FileStreamOutput((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::FileStreamOutput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1FileStreamOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::FileStreamOutput *arg1 = 0 ;
  imebra::FileStreamOutput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::FileStreamOutput **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::FileStreamOutput const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::FileStreamOutput *)new imebra::FileStreamOutput((imebra::FileStreamOutput const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::FileStreamOutput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1FileStreamOutput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::FileStreamOutput *arg1 = (imebra::FileStreamOutput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::FileStreamOutput **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MemoryStreamInput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Memory *arg1 = 0 ;
  imebra::MemoryStreamInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Memory **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Memory const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::MemoryStreamInput *)new imebra::MemoryStreamInput((imebra::Memory const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MemoryStreamInput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MemoryStreamInput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::MemoryStreamInput *arg1 = 0 ;
  imebra::MemoryStreamInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MemoryStreamInput **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::MemoryStreamInput const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::MemoryStreamInput *)new imebra::MemoryStreamInput((imebra::MemoryStreamInput const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MemoryStreamInput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1MemoryStreamInput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::MemoryStreamInput *arg1 = (imebra::MemoryStreamInput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::MemoryStreamInput **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MemoryStreamOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::MutableMemory *arg1 = 0 ;
  imebra::MemoryStreamOutput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableMemory **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::MutableMemory const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::MemoryStreamOutput *)new imebra::MemoryStreamOutput((imebra::MutableMemory const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MemoryStreamOutput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MemoryStreamOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::MemoryStreamOutput *arg1 = 0 ;
  imebra::MemoryStreamOutput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MemoryStreamOutput **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::MemoryStreamOutput const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::MemoryStreamOutput *)new imebra::MemoryStreamOutput((imebra::MemoryStreamOutput const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MemoryStreamOutput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1MemoryStreamOutput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::MemoryStreamOutput *arg1 = (imebra::MemoryStreamOutput *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::MemoryStreamOutput **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1PresentationContext_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  imebra::PresentationContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (imebra::PresentationContext *)new imebra::PresentationContext((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::PresentationContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1PresentationContext_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  imebra::PresentationContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (imebra::PresentationContext *)new imebra::PresentationContext((std::string const &)*arg1,arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::PresentationContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1PresentationContext_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::PresentationContext *arg1 = 0 ;
  imebra::PresentationContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::PresentationContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::PresentationContext const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::PresentationContext *)new imebra::PresentationContext((imebra::PresentationContext const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::PresentationContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1PresentationContext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::PresentationContext *arg1 = (imebra::PresentationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::PresentationContext **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_PresentationContext_1addTransferSyntax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  imebra::PresentationContext *arg1 = (imebra::PresentationContext *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::PresentationContext **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->addTransferSyntax((std::string const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1PresentationContexts_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::PresentationContexts *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::PresentationContexts *)new imebra::PresentationContexts();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::PresentationContexts **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1PresentationContexts_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::PresentationContexts *arg1 = 0 ;
  imebra::PresentationContexts *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::PresentationContexts **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::PresentationContexts const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::PresentationContexts *)new imebra::PresentationContexts((imebra::PresentationContexts const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::PresentationContexts **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1PresentationContexts(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::PresentationContexts *arg1 = (imebra::PresentationContexts *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::PresentationContexts **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_PresentationContexts_1addPresentationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::PresentationContexts *arg1 = (imebra::PresentationContexts *) 0 ;
  imebra::PresentationContext *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::PresentationContexts **)&jarg1; 
  arg2 = *(imebra::PresentationContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::PresentationContext const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->addPresentationContext((imebra::PresentationContext const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1AssociationMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::AssociationMessage *arg1 = 0 ;
  imebra::AssociationMessage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationMessage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::AssociationMessage const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::AssociationMessage *)new imebra::AssociationMessage((imebra::AssociationMessage const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::AssociationMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1AssociationMessage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::AssociationMessage *arg1 = (imebra::AssociationMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::AssociationMessage **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_AssociationMessage_1getAbstractSyntax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::AssociationMessage *arg1 = (imebra::AssociationMessage *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationMessage **)&jarg1; 
  {
    try {
      result = ((imebra::AssociationMessage const *)arg1)->getAbstractSyntax();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_AssociationMessage_1getCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::AssociationMessage *arg1 = (imebra::AssociationMessage *) 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationMessage **)&jarg1; 
  {
    try {
      result = ((imebra::AssociationMessage const *)arg1)->getCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = new imebra::DataSet((const imebra::DataSet &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_AssociationMessage_1getPayload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::AssociationMessage *arg1 = (imebra::AssociationMessage *) 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationMessage **)&jarg1; 
  {
    try {
      result = ((imebra::AssociationMessage const *)arg1)->getPayload();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = new imebra::DataSet((const imebra::DataSet &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_imebra_imebraJNI_AssociationMessage_1hasPayload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  imebra::AssociationMessage *arg1 = (imebra::AssociationMessage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationMessage **)&jarg1; 
  {
    try {
      result = (bool)((imebra::AssociationMessage const *)arg1)->hasPayload();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MutableAssociationMessage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  imebra::MutableAssociationMessage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (imebra::MutableAssociationMessage *)new imebra::MutableAssociationMessage((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableAssociationMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1MutableAssociationMessage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::MutableAssociationMessage *arg1 = 0 ;
  imebra::MutableAssociationMessage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::MutableAssociationMessage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::MutableAssociationMessage const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::MutableAssociationMessage *)new imebra::MutableAssociationMessage((imebra::MutableAssociationMessage const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::MutableAssociationMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1MutableAssociationMessage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::MutableAssociationMessage *arg1 = (imebra::MutableAssociationMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::MutableAssociationMessage **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_MutableAssociationMessage_1addDataSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::MutableAssociationMessage *arg1 = (imebra::MutableAssociationMessage *) 0 ;
  imebra::DataSet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::MutableAssociationMessage **)&jarg1; 
  arg2 = *(imebra::DataSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->addDataSet((imebra::DataSet const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1AssociationBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::AssociationBase **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_AssociationBase_1getCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  SwigValueWrapper< imebra::AssociationMessage > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationBase **)&jarg1; 
  {
    try {
      result = (arg1)->getCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::AssociationMessage **)&jresult = new imebra::AssociationMessage((const imebra::AssociationMessage &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_AssociationBase_1getResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  std::uint16_t arg2 ;
  SwigValueWrapper< imebra::AssociationMessage > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationBase **)&jarg1; 
  arg2 = (std::uint16_t)jarg2; 
  {
    try {
      result = (arg1)->getResponse(arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::AssociationMessage **)&jresult = new imebra::AssociationMessage((const imebra::AssociationMessage &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_AssociationBase_1sendMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  imebra::AssociationMessage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::AssociationBase **)&jarg1; 
  arg2 = *(imebra::AssociationMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::AssociationMessage const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->sendMessage((imebra::AssociationMessage const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_AssociationBase_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationBase **)&jarg1; 
  {
    try {
      (arg1)->release();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_AssociationBase_1abort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationBase **)&jarg1; 
  {
    try {
      (arg1)->abort();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_AssociationBase_1getThisAET(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationBase **)&jarg1; 
  {
    try {
      result = ((imebra::AssociationBase const *)arg1)->getThisAET();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_AssociationBase_1getOtherAET(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationBase **)&jarg1; 
  {
    try {
      result = ((imebra::AssociationBase const *)arg1)->getOtherAET();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_AssociationBase_1getTransferSyntax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = ((imebra::AssociationBase const *)arg1)->getTransferSyntax((std::string const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_AssociationBase_1getTransferSyntaxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  imebra::AssociationBase *arg1 = (imebra::AssociationBase *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationBase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = ((imebra::AssociationBase const *)arg1)->getTransferSyntaxes((std::string const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1AssociationSCU_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_, jlong jarg8) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  imebra::PresentationContexts *arg5 = 0 ;
  imebra::StreamReader *arg6 = 0 ;
  imebra::StreamWriter *arg7 = 0 ;
  std::uint32_t arg8 ;
  imebra::AssociationSCU *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  arg5 = *(imebra::PresentationContexts **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::PresentationContexts const & reference is null");
    return 0;
  } 
  arg6 = *(imebra::StreamReader **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::StreamReader & reference is null");
    return 0;
  } 
  arg7 = *(imebra::StreamWriter **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::StreamWriter & reference is null");
    return 0;
  } 
  arg8 = (std::uint32_t)jarg8; 
  {
    try {
      result = (imebra::AssociationSCU *)new imebra::AssociationSCU((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4,(imebra::PresentationContexts const &)*arg5,*arg6,*arg7,arg8);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::AssociationSCU **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1AssociationSCU_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::AssociationSCU *arg1 = 0 ;
  imebra::AssociationSCU *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationSCU **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::AssociationSCU const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::AssociationSCU *)new imebra::AssociationSCU((imebra::AssociationSCU const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::AssociationSCU **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1AssociationSCU(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::AssociationSCU *arg1 = (imebra::AssociationSCU *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::AssociationSCU **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1AssociationSCP_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jlong jarg8) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint32_t arg2 ;
  std::uint32_t arg3 ;
  imebra::PresentationContexts *arg4 = 0 ;
  imebra::StreamReader *arg5 = 0 ;
  imebra::StreamWriter *arg6 = 0 ;
  std::uint32_t arg7 ;
  std::uint32_t arg8 ;
  imebra::AssociationSCP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint32_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = *(imebra::PresentationContexts **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::PresentationContexts const & reference is null");
    return 0;
  } 
  arg5 = *(imebra::StreamReader **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::StreamReader & reference is null");
    return 0;
  } 
  arg6 = *(imebra::StreamWriter **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::StreamWriter & reference is null");
    return 0;
  } 
  arg7 = (std::uint32_t)jarg7; 
  arg8 = (std::uint32_t)jarg8; 
  {
    try {
      result = (imebra::AssociationSCP *)new imebra::AssociationSCP((std::string const &)*arg1,arg2,arg3,(imebra::PresentationContexts const &)*arg4,*arg5,*arg6,arg7,arg8);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::AssociationSCP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1AssociationSCP_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::AssociationSCP *arg1 = 0 ;
  imebra::AssociationSCP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationSCP **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::AssociationSCP const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::AssociationSCP *)new imebra::AssociationSCP((imebra::AssociationSCP const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::AssociationSCP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1AssociationSCP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::AssociationSCP *arg1 = (imebra::AssociationSCP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::AssociationSCP **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1DimseCommandBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::DimseCommandBase **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DimseCommandBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommandBase *arg1 = 0 ;
  imebra::DimseCommandBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommandBase **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DimseCommandBase const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::DimseCommandBase *)new imebra::DimseCommandBase((imebra::DimseCommandBase const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DimseCommandBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommandBase_1getCommandDataSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommandBase **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommandBase const *)arg1)->getCommandDataSet();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = new imebra::DataSet((const imebra::DataSet &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommandBase_1getPayloadDataSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  SwigValueWrapper< imebra::DataSet > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommandBase **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommandBase const *)arg1)->getPayloadDataSet();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DataSet **)&jresult = new imebra::DataSet((const imebra::DataSet &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_DimseCommandBase_1getAbstractSyntax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommandBase **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommandBase const *)arg1)->getAbstractSyntax();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_DimseCommandBase_1getAffectedSopInstanceUid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommandBase **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommandBase const *)arg1)->getAffectedSopInstanceUid();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_DimseCommandBase_1getAffectedSopClassUid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommandBase **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommandBase const *)arg1)->getAffectedSopClassUid();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_DimseCommandBase_1getRequestedSopInstanceUid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommandBase **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommandBase const *)arg1)->getRequestedSopInstanceUid();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_DimseCommandBase_1getRequestedSopClassUid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::DimseCommandBase *arg1 = (imebra::DimseCommandBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommandBase **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommandBase const *)arg1)->getRequestedSopClassUid();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DimseCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = 0 ;
  imebra::DimseCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DimseCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::DimseCommand *)new imebra::DimseCommand((imebra::DimseCommand const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DimseCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1DimseCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = (std::uint16_t)((imebra::DimseCommand const *)arg1)->getID();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getCommandType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  imebra::dimseCommandType_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = (imebra::dimseCommandType_t)((imebra::DimseCommand const *)arg1)->getCommandType();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsCStoreCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  SwigValueWrapper< imebra::CStoreCommand > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommand const *)arg1)->getAsCStoreCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CStoreCommand **)&jresult = new imebra::CStoreCommand((const imebra::CStoreCommand &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsCMoveCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  SwigValueWrapper< imebra::CMoveCommand > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommand const *)arg1)->getAsCMoveCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CMoveCommand **)&jresult = new imebra::CMoveCommand((const imebra::CMoveCommand &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsCGetCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  SwigValueWrapper< imebra::CGetCommand > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommand const *)arg1)->getAsCGetCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CGetCommand **)&jresult = new imebra::CGetCommand((const imebra::CGetCommand &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsCFindCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  SwigValueWrapper< imebra::CFindCommand > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommand const *)arg1)->getAsCFindCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CFindCommand **)&jresult = new imebra::CFindCommand((const imebra::CFindCommand &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsCEchoCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  SwigValueWrapper< imebra::CEchoCommand > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommand const *)arg1)->getAsCEchoCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CEchoCommand **)&jresult = new imebra::CEchoCommand((const imebra::CEchoCommand &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsCCancelCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  SwigValueWrapper< imebra::CCancelCommand > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommand const *)arg1)->getAsCCancelCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CCancelCommand **)&jresult = new imebra::CCancelCommand((const imebra::CCancelCommand &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsNActionCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  SwigValueWrapper< imebra::NActionCommand > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommand const *)arg1)->getAsNActionCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NActionCommand **)&jresult = new imebra::NActionCommand((const imebra::NActionCommand &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsNEventReportCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  SwigValueWrapper< imebra::NEventReportCommand > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommand const *)arg1)->getAsNEventReportCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NEventReportCommand **)&jresult = new imebra::NEventReportCommand((const imebra::NEventReportCommand &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsNCreateCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  SwigValueWrapper< imebra::NCreateCommand > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommand const *)arg1)->getAsNCreateCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NCreateCommand **)&jresult = new imebra::NCreateCommand((const imebra::NCreateCommand &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsNDeleteCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  SwigValueWrapper< imebra::NDeleteCommand > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommand const *)arg1)->getAsNDeleteCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NDeleteCommand **)&jresult = new imebra::NDeleteCommand((const imebra::NDeleteCommand &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsNSetCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  SwigValueWrapper< imebra::NSetCommand > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommand const *)arg1)->getAsNSetCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NSetCommand **)&jresult = new imebra::NSetCommand((const imebra::NSetCommand &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1getAsNGetCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseCommand *arg1 = (imebra::DimseCommand *) 0 ;
  SwigValueWrapper< imebra::NGetCommand > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseCommand **)&jarg1; 
  {
    try {
      result = ((imebra::DimseCommand const *)arg1)->getAsNGetCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NGetCommand **)&jresult = new imebra::NGetCommand((const imebra::NGetCommand &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DimseResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseResponse *arg1 = 0 ;
  imebra::DimseResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseResponse **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DimseResponse const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::DimseResponse *)new imebra::DimseResponse((imebra::DimseResponse const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DimseResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1DimseResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::DimseResponse *arg1 = (imebra::DimseResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::DimseResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DimseResponse_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::DimseResponse *arg1 = (imebra::DimseResponse *) 0 ;
  imebra::dimseStatus_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseResponse **)&jarg1; 
  {
    try {
      result = (imebra::dimseStatus_t)((imebra::DimseResponse const *)arg1)->getStatus();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DimseResponse_1getStatusCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::DimseResponse *arg1 = (imebra::DimseResponse *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseResponse **)&jarg1; 
  {
    try {
      result = (std::uint16_t)((imebra::DimseResponse const *)arg1)->getStatusCode();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CPartialResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::CPartialResponse *arg1 = 0 ;
  imebra::CPartialResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CPartialResponse **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CPartialResponse const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CPartialResponse *)new imebra::CPartialResponse((imebra::CPartialResponse const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CPartialResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CPartialResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CPartialResponse *arg1 = (imebra::CPartialResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CPartialResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CPartialResponse_1getRemainingSubOperations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::CPartialResponse *arg1 = (imebra::CPartialResponse *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CPartialResponse **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::CPartialResponse const *)arg1)->getRemainingSubOperations();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CPartialResponse_1getCompletedSubOperations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::CPartialResponse *arg1 = (imebra::CPartialResponse *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CPartialResponse **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::CPartialResponse const *)arg1)->getCompletedSubOperations();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CPartialResponse_1getFailedSubOperations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::CPartialResponse *arg1 = (imebra::CPartialResponse *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CPartialResponse **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::CPartialResponse const *)arg1)->getFailedSubOperations();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CPartialResponse_1getWarningSubOperations(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::CPartialResponse *arg1 = (imebra::CPartialResponse *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CPartialResponse **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::CPartialResponse const *)arg1)->getWarningSubOperations();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CStoreCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jint jarg7, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  imebra::dimseCommandPriority_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::uint16_t arg7 ;
  imebra::DataSet *arg8 = 0 ;
  imebra::CStoreCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg8_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  arg3 = (imebra::dimseCommandPriority_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  arg7 = (std::uint16_t)jarg7; 
  arg8 = *(imebra::DataSet **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CStoreCommand *)new imebra::CStoreCommand((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,arg7,(imebra::DataSet const &)*arg8);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CStoreCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CStoreCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::CStoreCommand *arg1 = 0 ;
  imebra::CStoreCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CStoreCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CStoreCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CStoreCommand *)new imebra::CStoreCommand((imebra::CStoreCommand const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CStoreCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CStoreCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CStoreCommand *arg1 = (imebra::CStoreCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CStoreCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_CStoreCommand_1getOriginatorAET(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::CStoreCommand *arg1 = (imebra::CStoreCommand *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CStoreCommand **)&jarg1; 
  {
    try {
      result = ((imebra::CStoreCommand const *)arg1)->getOriginatorAET();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_CStoreCommand_1getOriginatorMessageID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::CStoreCommand *arg1 = (imebra::CStoreCommand *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CStoreCommand **)&jarg1; 
  {
    try {
      result = (std::uint16_t)((imebra::CStoreCommand const *)arg1)->getOriginatorMessageID();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CStoreResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::CStoreCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::CStoreResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CStoreCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CStoreCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  {
    try {
      result = (imebra::CStoreResponse *)new imebra::CStoreResponse((imebra::CStoreCommand const &)*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CStoreResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CStoreResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::CStoreResponse *arg1 = 0 ;
  imebra::CStoreResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CStoreResponse **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CStoreResponse const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CStoreResponse *)new imebra::CStoreResponse((imebra::CStoreResponse const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CStoreResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CStoreResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CStoreResponse *arg1 = (imebra::CStoreResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CStoreResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CGetCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  imebra::dimseCommandPriority_t arg3 ;
  std::string *arg4 = 0 ;
  imebra::DataSet *arg5 = 0 ;
  imebra::CGetCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  arg3 = (imebra::dimseCommandPriority_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(imebra::DataSet **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CGetCommand *)new imebra::CGetCommand((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4,(imebra::DataSet const &)*arg5);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CGetCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CGetCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::CGetCommand *arg1 = 0 ;
  imebra::CGetCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CGetCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CGetCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CGetCommand *)new imebra::CGetCommand((imebra::CGetCommand const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CGetCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CGetCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CGetCommand *arg1 = (imebra::CGetCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CGetCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CGetResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  imebra::CGetCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  std::uint32_t arg6 ;
  imebra::DataSet *arg7 = 0 ;
  imebra::CGetResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(imebra::CGetCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CGetCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  arg5 = (std::uint32_t)jarg5; 
  arg6 = (std::uint32_t)jarg6; 
  arg7 = *(imebra::DataSet **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CGetResponse *)new imebra::CGetResponse((imebra::CGetCommand const &)*arg1,arg2,arg3,arg4,arg5,arg6,(imebra::DataSet const &)*arg7);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CGetResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CGetResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  imebra::CGetCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  std::uint32_t arg6 ;
  imebra::CGetResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CGetCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CGetCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  arg5 = (std::uint32_t)jarg5; 
  arg6 = (std::uint32_t)jarg6; 
  {
    try {
      result = (imebra::CGetResponse *)new imebra::CGetResponse((imebra::CGetCommand const &)*arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CGetResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CGetResponse_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::CGetResponse *arg1 = 0 ;
  imebra::CGetResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CGetResponse **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CGetResponse const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CGetResponse *)new imebra::CGetResponse((imebra::CGetResponse const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CGetResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CGetResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CGetResponse *arg1 = (imebra::CGetResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CGetResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CFindCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  imebra::dimseCommandPriority_t arg3 ;
  std::string *arg4 = 0 ;
  imebra::DataSet *arg5 = 0 ;
  imebra::CFindCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  arg3 = (imebra::dimseCommandPriority_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(imebra::DataSet **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CFindCommand *)new imebra::CFindCommand((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4,(imebra::DataSet const &)*arg5);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CFindCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CFindCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::CFindCommand *arg1 = 0 ;
  imebra::CFindCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CFindCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CFindCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CFindCommand *)new imebra::CFindCommand((imebra::CFindCommand const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CFindCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CFindCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CFindCommand *arg1 = (imebra::CFindCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CFindCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CFindResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::CFindCommand *arg1 = 0 ;
  imebra::DataSet *arg2 = 0 ;
  imebra::CFindResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::CFindCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CFindCommand const & reference is null");
    return 0;
  } 
  arg2 = *(imebra::DataSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CFindResponse *)new imebra::CFindResponse((imebra::CFindCommand const &)*arg1,(imebra::DataSet const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CFindResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CFindResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::CFindCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::CFindResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CFindCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CFindCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  {
    try {
      result = (imebra::CFindResponse *)new imebra::CFindResponse((imebra::CFindCommand const &)*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CFindResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CFindResponse_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::CFindResponse *arg1 = 0 ;
  imebra::CFindResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CFindResponse **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CFindResponse const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CFindResponse *)new imebra::CFindResponse((imebra::CFindResponse const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CFindResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CFindResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CFindResponse *arg1 = (imebra::CFindResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CFindResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CMoveCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jstring jarg4, jstring jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  imebra::dimseCommandPriority_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  imebra::DataSet *arg6 = 0 ;
  imebra::CMoveCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  arg3 = (imebra::dimseCommandPriority_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = *(imebra::DataSet **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CMoveCommand *)new imebra::CMoveCommand((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,(imebra::DataSet const &)*arg6);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CMoveCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CMoveCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::CMoveCommand *arg1 = 0 ;
  imebra::CMoveCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CMoveCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CMoveCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CMoveCommand *)new imebra::CMoveCommand((imebra::CMoveCommand const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CMoveCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CMoveCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CMoveCommand *arg1 = (imebra::CMoveCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CMoveCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_CMoveCommand_1getDestinationAET(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::CMoveCommand *arg1 = (imebra::CMoveCommand *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CMoveCommand **)&jarg1; 
  {
    try {
      result = ((imebra::CMoveCommand const *)arg1)->getDestinationAET();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CMoveResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  imebra::CMoveCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  std::uint32_t arg6 ;
  imebra::DataSet *arg7 = 0 ;
  imebra::CMoveResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(imebra::CMoveCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CMoveCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  arg5 = (std::uint32_t)jarg5; 
  arg6 = (std::uint32_t)jarg6; 
  arg7 = *(imebra::DataSet **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CMoveResponse *)new imebra::CMoveResponse((imebra::CMoveCommand const &)*arg1,arg2,arg3,arg4,arg5,arg6,(imebra::DataSet const &)*arg7);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CMoveResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CMoveResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  imebra::CMoveCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  std::uint32_t arg6 ;
  imebra::CMoveResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CMoveCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CMoveCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  arg5 = (std::uint32_t)jarg5; 
  arg6 = (std::uint32_t)jarg6; 
  {
    try {
      result = (imebra::CMoveResponse *)new imebra::CMoveResponse((imebra::CMoveCommand const &)*arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CMoveResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CMoveResponse_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::CMoveResponse *arg1 = 0 ;
  imebra::CMoveResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CMoveResponse **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CMoveResponse const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CMoveResponse *)new imebra::CMoveResponse((imebra::CMoveResponse const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CMoveResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CMoveResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CMoveResponse *arg1 = (imebra::CMoveResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CMoveResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CEchoCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  imebra::dimseCommandPriority_t arg3 ;
  std::string *arg4 = 0 ;
  imebra::CEchoCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  arg3 = (imebra::dimseCommandPriority_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (imebra::CEchoCommand *)new imebra::CEchoCommand((std::string const &)*arg1,arg2,arg3,(std::string const &)*arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CEchoCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CEchoCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::CEchoCommand *arg1 = 0 ;
  imebra::CEchoCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CEchoCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CEchoCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CEchoCommand *)new imebra::CEchoCommand((imebra::CEchoCommand const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CEchoCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CEchoCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CEchoCommand *arg1 = (imebra::CEchoCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CEchoCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CEchoResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::CEchoCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::CEchoResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CEchoCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CEchoCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  {
    try {
      result = (imebra::CEchoResponse *)new imebra::CEchoResponse((imebra::CEchoCommand const &)*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CEchoResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CEchoResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::CEchoResponse *arg1 = 0 ;
  imebra::CEchoResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CEchoResponse **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CEchoResponse const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CEchoResponse *)new imebra::CEchoResponse((imebra::CEchoResponse const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CEchoResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CEchoResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CEchoResponse *arg1 = (imebra::CEchoResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CEchoResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CCancelCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  imebra::dimseCommandPriority_t arg3 ;
  std::uint16_t arg4 ;
  imebra::CCancelCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  arg3 = (imebra::dimseCommandPriority_t)jarg3; 
  arg4 = (std::uint16_t)jarg4; 
  {
    try {
      result = (imebra::CCancelCommand *)new imebra::CCancelCommand((std::string const &)*arg1,arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CCancelCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1CCancelCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::CCancelCommand *arg1 = 0 ;
  imebra::CCancelCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CCancelCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CCancelCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::CCancelCommand *)new imebra::CCancelCommand((imebra::CCancelCommand const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CCancelCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1CCancelCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::CCancelCommand *arg1 = (imebra::CCancelCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::CCancelCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_CCancelCommand_1getCancelMessageID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::CCancelCommand *arg1 = (imebra::CCancelCommand *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::CCancelCommand **)&jarg1; 
  {
    try {
      result = (std::uint16_t)((imebra::CCancelCommand const *)arg1)->getCancelMessageID();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NEventReportCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::uint16_t arg5 ;
  imebra::NEventReportCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (std::uint16_t)jarg5; 
  {
    try {
      result = (imebra::NEventReportCommand *)new imebra::NEventReportCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NEventReportCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NEventReportCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jstring jarg4, jint jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::uint16_t arg5 ;
  imebra::DataSet *arg6 = 0 ;
  imebra::NEventReportCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (std::uint16_t)jarg5; 
  arg6 = *(imebra::DataSet **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NEventReportCommand *)new imebra::NEventReportCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,(imebra::DataSet const &)*arg6);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NEventReportCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NEventReportCommand_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::NEventReportCommand *arg1 = 0 ;
  imebra::NEventReportCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NEventReportCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NEventReportCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NEventReportCommand *)new imebra::NEventReportCommand((imebra::NEventReportCommand const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NEventReportCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NEventReportCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NEventReportCommand *arg1 = (imebra::NEventReportCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NEventReportCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_NEventReportCommand_1getEventID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::NEventReportCommand *arg1 = (imebra::NEventReportCommand *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NEventReportCommand **)&jarg1; 
  {
    try {
      result = (std::uint16_t)((imebra::NEventReportCommand const *)arg1)->getEventID();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NEventReportResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::NEventReportCommand *arg1 = 0 ;
  imebra::DataSet *arg2 = 0 ;
  imebra::NEventReportResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::NEventReportCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NEventReportCommand const & reference is null");
    return 0;
  } 
  arg2 = *(imebra::DataSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NEventReportResponse *)new imebra::NEventReportResponse((imebra::NEventReportCommand const &)*arg1,(imebra::DataSet const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NEventReportResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NEventReportResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::NEventReportCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::NEventReportResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NEventReportCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NEventReportCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  {
    try {
      result = (imebra::NEventReportResponse *)new imebra::NEventReportResponse((imebra::NEventReportCommand const &)*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NEventReportResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NEventReportResponse_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::NEventReportResponse *arg1 = 0 ;
  imebra::NEventReportResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NEventReportResponse **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NEventReportResponse const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NEventReportResponse *)new imebra::NEventReportResponse((imebra::NEventReportResponse const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NEventReportResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NEventReportResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NEventReportResponse *arg1 = (imebra::NEventReportResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NEventReportResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_NEventReportResponse_1getEventID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::NEventReportResponse *arg1 = (imebra::NEventReportResponse *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NEventReportResponse **)&jarg1; 
  {
    try {
      result = (std::uint16_t)((imebra::NEventReportResponse const *)arg1)->getEventID();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NGetCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jstring jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  imebra::attributeIdentifierList_t *arg5 = 0 ;
  imebra::NGetCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(imebra::attributeIdentifierList_t **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::attributeIdentifierList_t const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NGetCommand *)new imebra::NGetCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(imebra::attributeIdentifierList_t const &)*arg5);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NGetCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NGetCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::NGetCommand *arg1 = 0 ;
  imebra::NGetCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NGetCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NGetCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NGetCommand *)new imebra::NGetCommand((imebra::NGetCommand const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NGetCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NGetCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NGetCommand *arg1 = (imebra::NGetCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NGetCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NGetCommand_1getAttributeList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::NGetCommand *arg1 = (imebra::NGetCommand *) 0 ;
  SwigValueWrapper< std::vector< unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NGetCommand **)&jarg1; 
  {
    try {
      result = ((imebra::NGetCommand const *)arg1)->getAttributeList();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::attributeIdentifierList_t **)&jresult = new imebra::attributeIdentifierList_t((const imebra::attributeIdentifierList_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NGetResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  imebra::NGetCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::DataSet *arg3 = 0 ;
  imebra::NGetResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(imebra::NGetCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NGetCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  arg3 = *(imebra::DataSet **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NGetResponse *)new imebra::NGetResponse((imebra::NGetCommand const &)*arg1,arg2,(imebra::DataSet const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NGetResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NGetResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::NGetCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::NGetResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NGetCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NGetCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  {
    try {
      result = (imebra::NGetResponse *)new imebra::NGetResponse((imebra::NGetCommand const &)*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NGetResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NGetResponse_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::NGetResponse *arg1 = 0 ;
  imebra::NGetResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NGetResponse **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NGetResponse const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NGetResponse *)new imebra::NGetResponse((imebra::NGetResponse const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NGetResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NGetResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NGetResponse *arg1 = (imebra::NGetResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NGetResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NSetCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  imebra::DataSet *arg5 = 0 ;
  imebra::NSetCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(imebra::DataSet **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NSetCommand *)new imebra::NSetCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(imebra::DataSet const &)*arg5);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NSetCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NSetCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::NSetCommand *arg1 = 0 ;
  imebra::NSetCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NSetCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NSetCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NSetCommand *)new imebra::NSetCommand((imebra::NSetCommand const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NSetCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NSetCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NSetCommand *arg1 = (imebra::NSetCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NSetCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NSetResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  imebra::NSetCommand *arg1 = 0 ;
  SwigValueWrapper< std::vector< unsigned int > > arg2 ;
  imebra::attributeIdentifierList_t *argp2 ;
  imebra::NSetResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NSetCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NSetCommand const & reference is null");
    return 0;
  } 
  argp2 = *(imebra::attributeIdentifierList_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null imebra::attributeIdentifierList_t");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (imebra::NSetResponse *)new imebra::NSetResponse((imebra::NSetCommand const &)*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NSetResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NSetResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::NSetCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::NSetResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NSetCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NSetCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  {
    try {
      result = (imebra::NSetResponse *)new imebra::NSetResponse((imebra::NSetCommand const &)*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NSetResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NSetResponse_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::NSetResponse *arg1 = 0 ;
  imebra::NSetResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NSetResponse **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NSetResponse const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NSetResponse *)new imebra::NSetResponse((imebra::NSetResponse const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NSetResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NSetResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NSetResponse *arg1 = (imebra::NSetResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NSetResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NSetResponse_1getModifiedAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::NSetResponse *arg1 = (imebra::NSetResponse *) 0 ;
  SwigValueWrapper< std::vector< unsigned int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NSetResponse **)&jarg1; 
  {
    try {
      result = ((imebra::NSetResponse const *)arg1)->getModifiedAttributes();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::attributeIdentifierList_t **)&jresult = new imebra::attributeIdentifierList_t((const imebra::attributeIdentifierList_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NActionCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jstring jarg4, jint jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::uint16_t arg5 ;
  imebra::DataSet *arg6 = 0 ;
  imebra::NActionCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (std::uint16_t)jarg5; 
  arg6 = *(imebra::DataSet **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NActionCommand *)new imebra::NActionCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,(imebra::DataSet const &)*arg6);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NActionCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NActionCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::uint16_t arg5 ;
  imebra::NActionCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (std::uint16_t)jarg5; 
  {
    try {
      result = (imebra::NActionCommand *)new imebra::NActionCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NActionCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NActionCommand_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::NActionCommand *arg1 = 0 ;
  imebra::NActionCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NActionCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NActionCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NActionCommand *)new imebra::NActionCommand((imebra::NActionCommand const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NActionCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NActionCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NActionCommand *arg1 = (imebra::NActionCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NActionCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_NActionCommand_1getActionID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::NActionCommand *arg1 = (imebra::NActionCommand *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NActionCommand **)&jarg1; 
  {
    try {
      result = (std::uint16_t)((imebra::NActionCommand const *)arg1)->getActionID();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NActionResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::NActionCommand *arg1 = 0 ;
  imebra::DataSet *arg2 = 0 ;
  imebra::NActionResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::NActionCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NActionCommand const & reference is null");
    return 0;
  } 
  arg2 = *(imebra::DataSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NActionResponse *)new imebra::NActionResponse((imebra::NActionCommand const &)*arg1,(imebra::DataSet const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NActionResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NActionResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::NActionCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::NActionResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NActionCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NActionCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  {
    try {
      result = (imebra::NActionResponse *)new imebra::NActionResponse((imebra::NActionCommand const &)*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NActionResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NActionResponse_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::NActionResponse *arg1 = 0 ;
  imebra::NActionResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NActionResponse **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NActionResponse const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NActionResponse *)new imebra::NActionResponse((imebra::NActionResponse const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NActionResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NActionResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NActionResponse *arg1 = (imebra::NActionResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NActionResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_NActionResponse_1getActionID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::NActionResponse *arg1 = (imebra::NActionResponse *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NActionResponse **)&jarg1; 
  {
    try {
      result = (std::uint16_t)((imebra::NActionResponse const *)arg1)->getActionID();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NCreateCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  imebra::DataSet *arg5 = 0 ;
  imebra::NCreateCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(imebra::DataSet **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NCreateCommand *)new imebra::NCreateCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4,(imebra::DataSet const &)*arg5);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NCreateCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NCreateCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  imebra::NCreateCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (imebra::NCreateCommand *)new imebra::NCreateCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NCreateCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NCreateCommand_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::NCreateCommand *arg1 = 0 ;
  imebra::NCreateCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NCreateCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NCreateCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NCreateCommand *)new imebra::NCreateCommand((imebra::NCreateCommand const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NCreateCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NCreateCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NCreateCommand *arg1 = (imebra::NCreateCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NCreateCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NCreateResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::NCreateCommand *arg1 = 0 ;
  imebra::DataSet *arg2 = 0 ;
  imebra::NCreateResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::NCreateCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NCreateCommand const & reference is null");
    return 0;
  } 
  arg2 = *(imebra::DataSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NCreateResponse *)new imebra::NCreateResponse((imebra::NCreateCommand const &)*arg1,(imebra::DataSet const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NCreateResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NCreateResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  imebra::NCreateCommand *arg1 = 0 ;
  std::string *arg2 = 0 ;
  imebra::DataSet *arg3 = 0 ;
  imebra::NCreateResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(imebra::NCreateCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NCreateCommand const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(imebra::DataSet **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DataSet const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NCreateResponse *)new imebra::NCreateResponse((imebra::NCreateCommand const &)*arg1,(std::string const &)*arg2,(imebra::DataSet const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NCreateResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NCreateResponse_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::NCreateCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::NCreateResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NCreateCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NCreateCommand const & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  {
    try {
      result = (imebra::NCreateResponse *)new imebra::NCreateResponse((imebra::NCreateCommand const &)*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NCreateResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NCreateResponse_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  imebra::NCreateCommand *arg1 = 0 ;
  std::string *arg2 = 0 ;
  imebra::NCreateResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NCreateCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NCreateCommand const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (imebra::NCreateResponse *)new imebra::NCreateResponse((imebra::NCreateCommand const &)*arg1,(std::string const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NCreateResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NCreateResponse_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::NCreateResponse *arg1 = 0 ;
  imebra::NCreateResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NCreateResponse **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NCreateResponse const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NCreateResponse *)new imebra::NCreateResponse((imebra::NCreateResponse const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NCreateResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NCreateResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NCreateResponse *arg1 = (imebra::NCreateResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NCreateResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NDeleteCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint16_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  imebra::NDeleteCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint16_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (imebra::NDeleteCommand *)new imebra::NDeleteCommand((std::string const &)*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NDeleteCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NDeleteCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::NDeleteCommand *arg1 = 0 ;
  imebra::NDeleteCommand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NDeleteCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NDeleteCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NDeleteCommand *)new imebra::NDeleteCommand((imebra::NDeleteCommand const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NDeleteCommand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NDeleteCommand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NDeleteCommand *arg1 = (imebra::NDeleteCommand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NDeleteCommand **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NDeleteResponse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  imebra::NDeleteCommand *arg1 = 0 ;
  imebra::dimseStatusCode_t arg2 ;
  imebra::NDeleteResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NDeleteCommand **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NDeleteCommand & reference is null");
    return 0;
  } 
  arg2 = (imebra::dimseStatusCode_t)jarg2; 
  {
    try {
      result = (imebra::NDeleteResponse *)new imebra::NDeleteResponse(*arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NDeleteResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1NDeleteResponse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::NDeleteResponse *arg1 = 0 ;
  imebra::NDeleteResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::NDeleteResponse **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NDeleteResponse const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::NDeleteResponse *)new imebra::NDeleteResponse((imebra::NDeleteResponse const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NDeleteResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1NDeleteResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::NDeleteResponse *arg1 = (imebra::NDeleteResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::NDeleteResponse **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DimseService_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::AssociationBase *arg1 = 0 ;
  imebra::DimseService *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::AssociationBase **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::AssociationBase & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::DimseService *)new imebra::DimseService(*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DimseService **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1DimseService_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = 0 ;
  imebra::DimseService *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseService **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DimseService const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::DimseService *)new imebra::DimseService((imebra::DimseService const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DimseService **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1DimseService(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::DimseService **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_DimseService_1getTransferSyntax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = ((imebra::DimseService const *)arg1)->getTransferSyntax((std::string const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_DimseService_1getNextCommandID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  std::uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  {
    try {
      result = (std::uint16_t)(arg1)->getNextCommandID();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  SwigValueWrapper< imebra::DimseCommand > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  {
    try {
      result = (arg1)->getCommand();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::DimseCommand **)&jresult = new imebra::DimseCommand((const imebra::DimseCommand &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_DimseService_1sendCommandOrResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::DimseCommandBase *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::DimseCommandBase **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::DimseCommandBase const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->sendCommandOrResponse((imebra::DimseCommandBase const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getCStoreResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::CStoreCommand *arg2 = 0 ;
  SwigValueWrapper< imebra::CStoreResponse > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::CStoreCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CStoreCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getCStoreResponse((imebra::CStoreCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CStoreResponse **)&jresult = new imebra::CStoreResponse((const imebra::CStoreResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getCGetResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::CGetCommand *arg2 = 0 ;
  SwigValueWrapper< imebra::CGetResponse > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::CGetCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CGetCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getCGetResponse((imebra::CGetCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CGetResponse **)&jresult = new imebra::CGetResponse((const imebra::CGetResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getCFindResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::CFindCommand *arg2 = 0 ;
  SwigValueWrapper< imebra::CFindResponse > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::CFindCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CFindCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getCFindResponse((imebra::CFindCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CFindResponse **)&jresult = new imebra::CFindResponse((const imebra::CFindResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getCMoveResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::CMoveCommand *arg2 = 0 ;
  SwigValueWrapper< imebra::CMoveResponse > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::CMoveCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CMoveCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getCMoveResponse((imebra::CMoveCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CMoveResponse **)&jresult = new imebra::CMoveResponse((const imebra::CMoveResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getCEchoResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::CEchoCommand *arg2 = 0 ;
  SwigValueWrapper< imebra::CEchoResponse > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::CEchoCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::CEchoCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getCEchoResponse((imebra::CEchoCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::CEchoResponse **)&jresult = new imebra::CEchoResponse((const imebra::CEchoResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getNEventReportResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::NEventReportCommand *arg2 = 0 ;
  SwigValueWrapper< imebra::NEventReportResponse > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::NEventReportCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NEventReportCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getNEventReportResponse((imebra::NEventReportCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NEventReportResponse **)&jresult = new imebra::NEventReportResponse((const imebra::NEventReportResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getNGetResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::NGetCommand *arg2 = 0 ;
  SwigValueWrapper< imebra::NGetResponse > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::NGetCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NGetCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getNGetResponse((imebra::NGetCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NGetResponse **)&jresult = new imebra::NGetResponse((const imebra::NGetResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getNSetResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::NSetCommand *arg2 = 0 ;
  SwigValueWrapper< imebra::NSetResponse > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::NSetCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NSetCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getNSetResponse((imebra::NSetCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NSetResponse **)&jresult = new imebra::NSetResponse((const imebra::NSetResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getNActionResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::NActionCommand *arg2 = 0 ;
  SwigValueWrapper< imebra::NActionResponse > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::NActionCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NActionCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getNActionResponse((imebra::NActionCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NActionResponse **)&jresult = new imebra::NActionResponse((const imebra::NActionResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getNCreateResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::NCreateCommand *arg2 = 0 ;
  SwigValueWrapper< imebra::NCreateResponse > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::NCreateCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NCreateCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getNCreateResponse((imebra::NCreateCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NCreateResponse **)&jresult = new imebra::NCreateResponse((const imebra::NCreateResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseService_1getNDeleteResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  imebra::DimseService *arg1 = (imebra::DimseService *) 0 ;
  imebra::NDeleteCommand *arg2 = 0 ;
  SwigValueWrapper< imebra::NDeleteResponse > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(imebra::DimseService **)&jarg1; 
  arg2 = *(imebra::NDeleteCommand **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::NDeleteCommand const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getNDeleteResponse((imebra::NDeleteCommand const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::NDeleteResponse **)&jresult = new imebra::NDeleteResponse((const imebra::NDeleteResponse &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1Date_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Date *arg1 = 0 ;
  imebra::Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Date const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::Date *)new imebra::Date((imebra::Date const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1Date(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::Date **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1Date_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jint jarg8, jint jarg9) {
  jlong jresult = 0 ;
  std::uint32_t arg1 ;
  std::uint32_t arg2 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  std::uint32_t arg5 ;
  std::uint32_t arg6 ;
  std::uint32_t arg7 ;
  std::int32_t arg8 ;
  std::int32_t arg9 ;
  imebra::Date *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::uint32_t)jarg1; 
  arg2 = (std::uint32_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  arg5 = (std::uint32_t)jarg5; 
  arg6 = (std::uint32_t)jarg6; 
  arg7 = (std::uint32_t)jarg7; 
  arg8 = (std::int32_t)jarg8; 
  arg9 = (std::int32_t)jarg9; 
  {
    try {
      result = (imebra::Date *)new imebra::Date(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Date **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Date_1getYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::Date const *)arg1)->getYear();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Date_1getMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::Date const *)arg1)->getMonth();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Date_1getDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::Date const *)arg1)->getDay();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Date_1getHour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::Date const *)arg1)->getHour();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Date_1getMinutes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::Date const *)arg1)->getMinutes();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Date_1getSeconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::Date const *)arg1)->getSeconds();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Date_1getNanoseconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::Date const *)arg1)->getNanoseconds();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_Date_1getOffsetHours(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  {
    try {
      result = (std::int32_t)((imebra::Date const *)arg1)->getOffsetHours();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_Date_1getOffsetMinutes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::Date *arg1 = (imebra::Date *) 0 ;
  std::int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Date **)&jarg1; 
  {
    try {
      result = (std::int32_t)((imebra::Date const *)arg1)->getOffsetMinutes();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1Age_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Age *arg1 = 0 ;
  imebra::Age *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Age **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::Age const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::Age *)new imebra::Age((imebra::Age const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Age **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1Age(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::Age *arg1 = (imebra::Age *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::Age **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1Age_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::uint32_t arg1 ;
  imebra::ageUnit_t arg2 ;
  imebra::Age *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::uint32_t)jarg1; 
  arg2 = (imebra::ageUnit_t)jarg2; 
  {
    try {
      result = (imebra::Age *)new imebra::Age(arg1,arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::Age **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_imebra_imebraJNI_Age_1getYears(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  imebra::Age *arg1 = (imebra::Age *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Age **)&jarg1; 
  {
    try {
      result = (double)((imebra::Age const *)arg1)->getYears();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_Age_1getAgeValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::Age *arg1 = (imebra::Age *) 0 ;
  std::uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Age **)&jarg1; 
  {
    try {
      result = (std::uint32_t)((imebra::Age const *)arg1)->getAgeValue();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_imebra_imebraJNI_Age_1getAgeUnits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  imebra::Age *arg1 = (imebra::Age *) 0 ;
  imebra::ageUnit_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::Age **)&jarg1; 
  {
    try {
      result = (imebra::ageUnit_t)((imebra::Age const *)arg1)->getAgeUnits();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1PatientName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::PatientName *arg1 = 0 ;
  imebra::PatientName *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::PatientName **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::PatientName const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::PatientName *)new imebra::PatientName((imebra::PatientName const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::PatientName **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1PatientName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::PatientName *arg1 = (imebra::PatientName *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::PatientName **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1PatientName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  imebra::PatientName *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (imebra::PatientName *)new imebra::PatientName((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::PatientName **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_PatientName_1getAlphabeticRepresentation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::PatientName *arg1 = (imebra::PatientName *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::PatientName **)&jarg1; 
  {
    try {
      result = ((imebra::PatientName const *)arg1)->getAlphabeticRepresentation();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_PatientName_1getIdeographicRepresentation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::PatientName *arg1 = (imebra::PatientName *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::PatientName **)&jarg1; 
  {
    try {
      result = ((imebra::PatientName const *)arg1)->getIdeographicRepresentation();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_PatientName_1getPhoneticRepresentation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::PatientName *arg1 = (imebra::PatientName *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::PatientName **)&jarg1; 
  {
    try {
      result = ((imebra::PatientName const *)arg1)->getPhoneticRepresentation();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_UIDGeneratorFactory_1registerUIDGenerator(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  imebra::BaseUIDGenerator *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(imebra::BaseUIDGenerator **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::BaseUIDGenerator const & reference is null");
    return ;
  } 
  {
    try {
      imebra::UIDGeneratorFactory::registerUIDGenerator((std::string const &)*arg1,(imebra::BaseUIDGenerator const &)*arg2);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_UIDGeneratorFactory_1getUIDGenerator(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  SwigValueWrapper< imebra::BaseUIDGenerator > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = imebra::UIDGeneratorFactory::getUIDGenerator((std::string const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::BaseUIDGenerator **)&jresult = new imebra::BaseUIDGenerator((const imebra::BaseUIDGenerator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_UIDGeneratorFactory_1getDefaultUIDGenerator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< imebra::BaseUIDGenerator > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = imebra::UIDGeneratorFactory::getDefaultUIDGenerator();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::BaseUIDGenerator **)&jresult = new imebra::BaseUIDGenerator((const imebra::BaseUIDGenerator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1UIDGeneratorFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  imebra::UIDGeneratorFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (imebra::UIDGeneratorFactory *)new imebra::UIDGeneratorFactory();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::UIDGeneratorFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1UIDGeneratorFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::UIDGeneratorFactory *arg1 = (imebra::UIDGeneratorFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::UIDGeneratorFactory **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1BaseUIDGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::BaseUIDGenerator *arg1 = 0 ;
  imebra::BaseUIDGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::BaseUIDGenerator **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::BaseUIDGenerator const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::BaseUIDGenerator *)new imebra::BaseUIDGenerator((imebra::BaseUIDGenerator const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::BaseUIDGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1BaseUIDGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::BaseUIDGenerator *arg1 = (imebra::BaseUIDGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::BaseUIDGenerator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_imebra_imebraJNI_BaseUIDGenerator_1getUID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  imebra::BaseUIDGenerator *arg1 = (imebra::BaseUIDGenerator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::BaseUIDGenerator **)&jarg1; 
  {
    try {
      result = (arg1)->getUID();
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1RandomUIDGenerator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint32_t arg2 ;
  std::uint32_t arg3 ;
  imebra::RandomUIDGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint32_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  {
    try {
      result = (imebra::RandomUIDGenerator *)new imebra::RandomUIDGenerator((std::string const &)*arg1,arg2,arg3);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::RandomUIDGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1RandomUIDGenerator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::RandomUIDGenerator *arg1 = 0 ;
  imebra::RandomUIDGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::RandomUIDGenerator **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::RandomUIDGenerator const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::RandomUIDGenerator *)new imebra::RandomUIDGenerator((imebra::RandomUIDGenerator const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::RandomUIDGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1RandomUIDGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::RandomUIDGenerator *arg1 = (imebra::RandomUIDGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::RandomUIDGenerator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1SerialNumberUIDGenerator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::uint32_t arg2 ;
  std::uint32_t arg3 ;
  std::uint32_t arg4 ;
  imebra::SerialNumberUIDGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (std::uint32_t)jarg2; 
  arg3 = (std::uint32_t)jarg3; 
  arg4 = (std::uint32_t)jarg4; 
  {
    try {
      result = (imebra::SerialNumberUIDGenerator *)new imebra::SerialNumberUIDGenerator((std::string const &)*arg1,arg2,arg3,arg4);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::SerialNumberUIDGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_new_1SerialNumberUIDGenerator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  imebra::SerialNumberUIDGenerator *arg1 = 0 ;
  imebra::SerialNumberUIDGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(imebra::SerialNumberUIDGenerator **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "imebra::SerialNumberUIDGenerator const & reference is null");
    return 0;
  } 
  {
    try {
      result = (imebra::SerialNumberUIDGenerator *)new imebra::SerialNumberUIDGenerator((imebra::SerialNumberUIDGenerator const &)*arg1);
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return 0; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return 0; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return 0; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return 0; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return 0; 
      };
    }
  }
  *(imebra::SerialNumberUIDGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_imebra_imebraJNI_delete_1SerialNumberUIDGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  imebra::SerialNumberUIDGenerator *arg1 = (imebra::SerialNumberUIDGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(imebra::SerialNumberUIDGenerator **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(const imebra::MissingDataElementError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IndexError, error.c_str()); return ; 
      };
    } catch(const imebra::LutError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::StreamError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DictionaryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::CharsetConversionError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::CodecError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_IOError, error.c_str()); return ; 
      };
    } catch(const imebra::DataHandlerError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DataSetError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::DicomDirError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const imebra::ImageError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::TransformError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_ValueError, error.c_str()); return ; 
      };
    } catch(const imebra::MemoryError& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_MemoryError, error.c_str()); return ; 
      };
    } catch(const std::bad_cast& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_TypeError, error.c_str()); return ; 
      };
    } catch(const std::runtime_error& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    } catch(const std::exception& e) {
      std::string error(imebra::ExceptionsManager::getExceptionTrace());
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, error.c_str()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableMemory_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::Memory **)&baseptr = *(imebra::MutableMemory **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ReadingDataHandlerNumeric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::ReadingDataHandler **)&baseptr = *(imebra::ReadingDataHandlerNumeric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_WritingDataHandlerNumeric_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::WritingDataHandler **)&baseptr = *(imebra::WritingDataHandlerNumeric **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableImage_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::Image **)&baseptr = *(imebra::MutableImage **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableOverlay_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::Overlay **)&baseptr = *(imebra::MutableOverlay **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableTag_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::Tag **)&baseptr = *(imebra::MutableTag **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableDataSet_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DataSet **)&baseptr = *(imebra::MutableDataSet **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TCPActiveAddress_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::TCPAddress **)&baseptr = *(imebra::TCPActiveAddress **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TCPPassiveAddress_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::TCPAddress **)&baseptr = *(imebra::TCPPassiveAddress **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TransformHighBit_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::Transform **)&baseptr = *(imebra::TransformHighBit **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_TransformsChain_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::Transform **)&baseptr = *(imebra::TransformsChain **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_ModalityVOILUT_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::Transform **)&baseptr = *(imebra::ModalityVOILUT **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_VOILUT_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::Transform **)&baseptr = *(imebra::VOILUT **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableDicomDirEntry_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DicomDirEntry **)&baseptr = *(imebra::MutableDicomDirEntry **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableDicomDir_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DicomDir **)&baseptr = *(imebra::MutableDicomDir **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_FileStreamInput_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::BaseStreamInput **)&baseptr = *(imebra::FileStreamInput **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_FileStreamOutput_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::BaseStreamOutput **)&baseptr = *(imebra::FileStreamOutput **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MemoryStreamInput_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::BaseStreamInput **)&baseptr = *(imebra::MemoryStreamInput **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MemoryStreamOutput_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::BaseStreamOutput **)&baseptr = *(imebra::MemoryStreamOutput **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_MutableAssociationMessage_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::AssociationMessage **)&baseptr = *(imebra::MutableAssociationMessage **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_AssociationSCU_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::AssociationBase **)&baseptr = *(imebra::AssociationSCU **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_AssociationSCP_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::AssociationBase **)&baseptr = *(imebra::AssociationSCP **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommandBase **)&baseptr = *(imebra::DimseCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_DimseResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommandBase **)&baseptr = *(imebra::DimseResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CPartialResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseResponse **)&baseptr = *(imebra::CPartialResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CStoreCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::CStoreCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CStoreResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseResponse **)&baseptr = *(imebra::CStoreResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CGetCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::CGetCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CGetResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::CPartialResponse **)&baseptr = *(imebra::CGetResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CFindCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::CFindCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CFindResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseResponse **)&baseptr = *(imebra::CFindResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CMoveCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::CMoveCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CMoveResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::CPartialResponse **)&baseptr = *(imebra::CMoveResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CEchoCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::CEchoCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CEchoResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseResponse **)&baseptr = *(imebra::CEchoResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_CCancelCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::CCancelCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NEventReportCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::NEventReportCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NEventReportResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseResponse **)&baseptr = *(imebra::NEventReportResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NGetCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::NGetCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NGetResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseResponse **)&baseptr = *(imebra::NGetResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NSetCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::NSetCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NSetResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseResponse **)&baseptr = *(imebra::NSetResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NActionCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::NActionCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NActionResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseResponse **)&baseptr = *(imebra::NActionResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NCreateCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::NCreateCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NCreateResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseResponse **)&baseptr = *(imebra::NCreateResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NDeleteCommand_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseCommand **)&baseptr = *(imebra::NDeleteCommand **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_NDeleteResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::DimseResponse **)&baseptr = *(imebra::NDeleteResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_RandomUIDGenerator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::BaseUIDGenerator **)&baseptr = *(imebra::RandomUIDGenerator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_imebra_imebraJNI_SerialNumberUIDGenerator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(imebra::BaseUIDGenerator **)&baseptr = *(imebra::SerialNumberUIDGenerator **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

